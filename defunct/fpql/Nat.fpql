/*
 * Nat(X) := 1+X
 * Nat(f) := 1+f
 * Nat := lfix X. Nat(X)
 * 
 * in : 1 + Nat -> Nat
 * out: Nat -> 1 + Nat
 * in o out = id
 * out o id  = id
 * 
 * fold(f) : Nat -> Y for f : 1+Y -> Y 
 * in o fold(f) = Nat(fold(f)) o f  
 */
S = schema {
	nodes  One
	      ,Nat
	      ,Nat_mod_2 
	      ,One_Plus_Nat
	      ,One_Plus_Nat_mod_2
	      ;
	edges zero : One -> Nat_mod_2
		,succ : Nat_mod_2 -> Nat_mod_2
		,in : One_Plus_Nat -> Nat
	     ,out : Nat -> One_Plus_Nat
	     ,inj1 : Nat -> One_Plus_Nat
	     ,inj2 : One -> One_Plus_Nat
	     ,inj3 : Nat_mod_2 -> One_Plus_Nat_mod_2
	     ,inj4 : One -> One_Plus_Nat_mod_2
	     ,f : One_Plus_Nat_mod_2 -> Nat_mod_2
	     ,fold_f : Nat -> Nat_mod_2
	     ,Natfold_f : One_Plus_Nat -> One_Plus_Nat_mod_2 
		;
	equations  succ . succ = Nat_mod_2
			,in . out = One_Plus_Nat 
	          ,out . in = Nat
	          ,inj4 . f = zero
	          ,inj3 . f = succ
	          ,inj1 . Natfold_f = fold_f . inj3 
	          ,inj2 . Natfold_f = inj4 
	          ,in . fold_f = Natfold_f . f 
	          ; //missing equations about coproducts and terminal objects
}

I = instance {
	variables;
	equations;
} : S

// One.inj2.in.fold_f  ----> zero
// One.inj2.in.inj1.in.fold_f ----> zero.succ
// One.inj2.in.inj1.in.inj1.in.fold_f ---> zero

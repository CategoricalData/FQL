dom : type
1 2 3 : dom

S = schema {
	nodes S1, S2;
	edges a:S1->dom, b:S1->dom, c:S2->dom, d:S2->dom, e:S2->dom;
	equations;
}

T = schema {
	nodes T;
	edges x:T->dom;
	equations;
}

Q = polynomial {
	 q = {for v:S1, u:S2; where v.b=u.c; attributes x=v.b; edges;} : T
} : S -> T

J = instance {
	variables j1 j2 j3 j4 : T;
	equations j1.x=1, j2.x=2, j3.x=3;
} : T

I = coapply Q J

///////////////////////////////////////////////////////
/*
Suppose S := T1(a,b) and T2(c,d,e)
Suppose T := T(x)

Suppose Q := 
SELECT b 
FROM T1(a,b) and T2(c,d,e)
WHERE b=c

Suppose J(1), J(2), J(3), J(y) [variables y, constants 1,2,3] 

Then frozen_Q = T1(a,b), T2(c,d,e), b=c [variables b, constants a c d e] 

Then coeval_Q(J) = chase [
//additional EDs in S, T would go here
_ => exists a c d e, T1(a,b), T2(c,d,e), b=c, b=1
_ => exists a c d e, T1(a,b), T2(c,d,e), b=c, b=2
_ => exists a c d e, T1(a,b), T2(c,d,e), b=c, b=3
_ => exists a c d e, T1(a,b), T2(c,d,e), b=c, b=y
] 
the above is obtained by "running" frozen_Q on J. it is also an
instance 
{ 
   T1 (a, 1), T2 (1, d, e), 
   T1 (a, 2), T2 (2, d, e), 
   T1 (a, 3), T2 (3, d, e), 
   T1 (a, y), T2 (y, d, e)
 }

If eval_Q(I) = {2, 3, x}, the possible homomorphisms J => eval_Q(I) are

h1 := y |-> 2
h2 := y |-> 3
h3 := y |-> x

Each of these is also a homomorphism coeval_Q(J) => I; i.e.,  is the same thing as a valuation in I for coeval_Q(J)'s variables.
*/

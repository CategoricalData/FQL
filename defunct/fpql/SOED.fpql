String : type

gecko frog human cow horse dolphin fish : String

C = schema {
	nodes 
		Amphibian,
		LandAnimal,
		WaterAnimal;
	edges
		attA: Amphibian -> String, 
		attL: LandAnimal -> String, 
		attW: WaterAnimal -> String,
		IsAL: Amphibian -> LandAnimal,
		IsAW: Amphibian -> WaterAnimal;
	equations;
}

I = instance {
	variables 
		a1 a2: Amphibian,
		l1 l2 l3 l4 l5: LandAnimal,
		w1 w2 w3 w4: WaterAnimal;
	equations
		a1.attA = gecko, a2.attA = frog,
		l1.attL = gecko, l2.attL = frog, l3.attL = human, l4.attL = cow, l5.attL = horse,
		w1.attW = fish, w2.attW = gecko, w3.attW = frog, w4.attW = dolphin,
		a1.IsAL = l1, a2.IsAL = l2,
		a1.IsAW = w2, a2.IsAW = w3; 
} : C

D = schema {
	nodes 
		yAmphibian,
		yLandAnimal,
		yWaterAnimal,
		yAnimal;
	edges
		yattA:yAmphibian->String, 
		yattL:yLandAnimal->String, 
		yattW:yWaterAnimal->String,
		yIsAL:yAmphibian->yLandAnimal,
		yIsAW:yAmphibian->yWaterAnimal,
		yIsALL:yLandAnimal->yAnimal,
		yIsAWW:yWaterAnimal->yAnimal;
	equations
		yAmphibian.yIsAL.yIsALL=yAmphibian.yIsAW.yIsAWW;
}

F = mapping {
	nodes 
		Amphibian->yAmphibian,
		LandAnimal->yLandAnimal,
		WaterAnimal->yWaterAnimal;
	edges
		attA -> yAmphibian.yattA, 
		attL -> yLandAnimal.yattL, 
		attW -> yWaterAnimal.yattW,
		IsAL -> yAmphibian.yIsAL,
		IsAW -> yAmphibian.yIsAW;
} : C -> D

J = sigma F I
	
J0 = soed {
	exists am : Amphibian->yAmphibian,
		  la : LandAnimal->yLandAnimal,
		  wa : WaterAnimal->yWaterAnimal;
	forall a:Amphibian, a.am.yattA = a.attA, 
				     a.IsAL.la = a.am.yIsAL, 
				     a.IsAW.wa = a.am.yIsAW;
	forall l:LandAnimal, l.la.yattL = l.attL ;
	forall w:WaterAnimal, w.wa.yattW = w.attW ;		  
} : C -> D on I

/* J1 = supersoed {
	exists am : Amphibian -> yAmphibian,
	  la : LandAnimal -> yLandAnimal,
	  wa : WaterAnimal -> yWaterAnimal;
forall a:Amphibian, -> @am(a).yattA = a.attA, 
			     @la(a.IsAL) = @am(a).yIsAL, 
			     @wa(a.IsAW) = @am(a).yIsAW;
forall l:LandAnimal, -> @la(l).yattL = l.attL ;
forall w:WaterAnimal, -> @wa(w).yattW = w.attW ;
} : C -> D on I */

/*
J0 = soed {
exists am : Amphibian->yAmphibian,
	  la : LandAnimal->yLandAnimal,
	  wa : WaterAnimal->yWaterAnimal;
attA = am.yattA, 
attL = la.yattL,
attW = wa.yattW,
IsAL.la = am.yIsAL,
IsAW.wa = am.yIsAW;
		} : C -> D on I
*/

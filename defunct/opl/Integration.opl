//Example via Peter Gates
///////////////////////////////////////////////////////////////////////////

Type = theory {
	sorts
		dom;
	symbols
		xPeter, xPaul, xJane, xPete, xM, xF, 
		xBloodPressure, xBodyWeight, xHeartRate : dom;
	equations;
}

///////////////////////////////////////////////////////////////////////////

S = SCHEMA {
	entities
		O, P, T;
 	edges
		f: O -> P, 
		g: O -> T;
	attributes;
	pathEqualities; 
	obsEqualities;
} : Type

S1 = SCHEMA {
	entities 
		Observation, Person, Gender, ObsType;
	edges 
		f: Observation -> Person, 
		h: Person -> Gender, 
		g: Observation -> ObsType;
	attributes	
	     Person_att: Person -> dom, 
	     Gender_att: Gender -> dom, 
	     ObsType_att: ObsType -> dom;
	pathEqualities; 
	obsEqualities;
} : Type

S2 = SCHEMA {
	entities 
		Observation, Patient, Method, Type;
	edges 
		f: Observation -> Patient, 
		g1: Observation -> Method, 
		g2: Method -> Type;
	attributes
         Method_att: Method -> dom,
	      Patient_att: Patient -> dom, 
	      Type_att: Type -> dom;
	pathEqualities; 
	obsEqualities;
} : Type

F1 = mapping {
	sorts 
		O -> Observation,
		P -> Person, 
		T -> ObsType;
	symbols 
		f -> forall x. f(x), 
		g -> forall x. g(x);
} : S -> S1

F2 = mapping {
	sorts
		O -> Observation,
		P -> Patient,
		T -> Type;
	symbols 
		f -> forall x. f(x),
		g -> forall x. g2(g1(x));
} : S -> S2

///////////////////////////////////////////////////////////////////////////

T = SCHEMA {
	entities 
		O, P, G, T, M;
	edges 
		f: O -> P, 
		h: P -> G,		
		g1: O -> M, 
		g2: M -> T;
	attributes	
       M_att: M -> dom,
		G_att: G -> dom,
		T_att1: T -> dom,
		T_att2: T -> dom,
		P_att1: P -> dom,
		P_att2: P -> dom;
	pathEqualities; 
	obsEqualities;
} : Type

G1 = mapping {
	sorts 
		Observation -> O,
		Person -> P, 
		ObsType -> T,
		Gender -> G;
	symbols 
		f -> forall x. f(x), 
		g -> forall x. g2(g1(x)),
		h -> forall x. h(x),
		Person_att -> forall x. P_att1(x),
		Gender_att -> forall x. G_att(x),
		ObsType_att -> forall x. T_att1(x);
} : S1 -> T

G2 = mapping {
	sorts
		Observation -> O,
		Patient -> P,
		Method -> M,
		Type -> T;
	symbols 
		f -> forall x. f(x),
		g1 -> forall x. g1(x),
		g2 -> forall x. g2(x),
       Method_att -> forall x. M_att(x),
		Patient_att -> forall x. P_att2(x),
		Type_att -> forall x. T_att2(x); 		
} : S2 -> T

//this is the pushout schema, but it is easier to work with a schema written by hand (T)
Z = PUSHOUT F1 F2
///////////////////////////////////////////////////////////////////////////

I1 = INSTANCE {
	generators
		one, two, three : Observation,
		Peter, Paul : Person,
	    	M, F :Gender,
	    	BloodPressure, BodyWeight, HeartRate: ObsType; 
	equations
		Peter.Person_att = xPeter, Paul.Person_att = xPaul,
		M.Gender_att = xM, F.Gender_att = xF,
		BloodPressure.ObsType_att = xBloodPressure, 
		BodyWeight.ObsType_att = xBodyWeight,
		HeartRate.ObsType_att = xHeartRate,
		one.f = Peter, two.f = Peter, three.f = Paul,
		Peter.h = M, Paul.h = M,
		one.g = BloodPressure, two.g = BodyWeight, three.g = HeartRate;
} : S1

I2 = INSTANCE {
	generators
		o1, o2, o3, o4 : Observation,
		Pete, Jane : Patient,
		m1, m2, m3, m4 :Method,
		BP, Wt : Type;
	equations
	     Pete.Patient_att = xPete, Jane.Patient_att = xJane,
	     BP.Type_att = xBloodPressure, Wt.Type_att = xBodyWeight,
	     o1.f = Pete, o2.f = Pete, o3.f = Jane, o4.f = Jane,
	     o1.g1 = m1, o2.g1 = m2, o3.g1 = m3, o4.g1 = m1,
	     m1.g2 = BP, m2.g2 = BP, m3.g2 = Wt, m4.g2 = Wt;
} : S2


I = INSTANCE {
	generators 
	  	Peter: P, 
	  	BloodPressure, BodyWeight:T;
	equations;
} : S

temp1 = sigma F1 I
temp2 = sigma F2 I

a1 = transpres {
		sorts 
			Person -> {(Peter, Peter)},
			ObsType -> {(BloodPressure, BloodPressure), (BodyWeight, BodyWeight)};
} : temp1 -> I1

a2 = transpres {
		sorts
			Patient -> {(Peter, Pete)},
			Type -> {(BloodPressure, BP), (BodyWeight, Wt)};
} : temp2 -> I2

///////////////////////////////////////////////////////////////////////////

b1 = sigma G1 a1
b2 = sigma G2 a2

answer = pushout b1 b2

Group = theory {
 sorts 
	S;
 symbols
	e : S,
	I : S -> S,
	o : S,S -> S;
 equations
 forall x. (e o x) = x,
 forall x. (I(x) o x) = e,
 forall x, y, z. ((x o y) o z) = (x o (y o z));
}
AGroupPresentation = presentation {
	generators g : S;
	equations o(g, o(g, g)) = g;
} : Group
AGroup = saturate AGroupPresentation
AGroupPresentationAgain = unsaturate AGroup
AGroupAgain = saturate AGroupPresentationAgain

TrivialGroup = model {
	sorts S -> {x};
	symbols e -> { ((),x) },
		   I -> { ((x),x) },
		   o -> { ((x,x),x) };
} : Group

LR = theory {
 sorts 
	S;
 symbols
	e : S,
	I : S -> S,
	o : S,S -> S;
 equations
	forall x. o(e,x) = x,
	forall x. o(x,I(x)) = e,
	forall x, y, z. o(o(x,y),z)=o(x,o(y,z));
}

RL = theory {
 sorts 
	S;
 symbols
	e : S,
	I : S -> S,
	o : S,S -> S;
 equations
	forall x. o(x,e) = x,
	forall x. o(I(x),x) = e,
	forall x, y, z. o(o(x,y),z)=o(x,o(y,z));
}

OddEvenMod4 = theory {
	sorts 
		Odd, Even;
	symbols 
		zero@0 : Even,
		one@1 : Odd,
		incO@2 : Odd -> Even,
		incE@3 : Even -> Odd;
	equations
		forall x. incE(incO(incE(incO(x)))) = x,
		forall x. incO(incE(incO(incE(x)))) = x;	
}

Arith = theory {
	sorts
		N;
	symbols
		zero@1 : N,
		succ@2 : N -> N,
		plus@3 : N,N -> N,
		times@4 : N,N -> N;  
	equations
       forall x. plus(zero, x) = x,
		forall x, y. plus(succ(x),y) = succ(plus(x,y)),
		forall x, y. times(succ(x),y) = plus(x,times(x,y));
}

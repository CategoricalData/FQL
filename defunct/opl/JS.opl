T = theory {
	sorts 
		Int, String;
	symbols 
		zero : Int,
		succ, pred : Int -> Int,
		length : String -> Int,
		reverse : String -> String,
		append : String, String -> String,
		print : Int -> String;
	equations	
		forall x. pred(succ(x)) = x,
		forall x. succ(pred(x)) = x,
		forall x. length(x) = length(reverse(x));
}

M = javascript {
	symbols
		_preamble -> "javax.swing.JOptionPane.showMessageDialog(null, \"hello\")",
		zero -> "return 0",
		succ -> "return (input[0] + 1)",
		pred -> "return (input[0] - 1)",
		length -> "return input[0].length",
		reverse -> "return input[0].split('').reverse().join('')",
		append -> "return input[0].concat(input[1])",
		print -> "return input[0].toString()";
} : T

z = eval M zero()
sz = eval M succ(zero())
ssz = eval M succ(succ(zero()))
pssz = eval M pred(succ(succ(zero())))

test1 = eval M append(print(succ(zero())), print(zero()))
rev_test1 = eval M reverse(append(print(succ(zero())), print(zero())))
len_test1 = eval M length(reverse(append(print(succ(zero())), print(zero()))))

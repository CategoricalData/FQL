S0 = theory { 
 sorts
 	Employee, Department, string, nat;
 symbols
 	Al, Akin, Bob, Bo, Carl, Cork, Dan, Dunn, Math, CS : string,
 	zero 	: nat,
 	succ		: nat -> nat,
 	plus		: nat, nat -> nat,
 	print	: nat -> string,
 	length 	: string -> nat,
 	reverse 	: string -> string,
 	append	: string, string -> string,
     first, last, middle 	: Employee -> string,
     age		: Employee -> nat,
     name 	: Department -> string,
	manager   : Employee -> Employee,
	worksIn   : Employee -> Department,
	secretary : Department -> Employee;
 equations  
 	forall x. plus(x,zero) = x,
 	forall x, y. plus(succ(x),y) = succ(plus(x,y)),
 	forall x. reverse(reverse(x)) = x,
 	forall x. length(x) = length(reverse(x)),
 	forall x, y. length(append(x,y)) = plus(length(x),length(y)),
  	forall x. worksIn(manager(x)) = worksIn(x),
  	forall x. worksIn(secretary(x)) = x;
  //	forall x. manager(manager(x)) = manager(x); can finitize at instance level 
}

S = schema {
	entities
		Employee, Department;	
} : S0

E = entities S
A = attributes S
T = types S
EA = entitiesAndAttributes S

I0 = presentation {
	generators a, b, c : Employee, 
	           m, s : Department;
	equations first(a) = Al, 
			first(b) = Bob,  last(b) = Bo,
			first(c) = Carl, 
			name(m)  = Math, name(s) = CS,
			age(a) = age(c), //eq of 2 skolems
			last(a) = last(b), //eq 1 skolem, 1 not
			middle(a) = append(first(a),first(b)), //computation
			middle(b) = append(first(a),middle(c)), //partial computation
			manager(a) = b, manager(b) = b, manager(c) = c,
			worksIn(a) = m,  worksIn(b) = m,  worksIn(c) = s,
			secretary(s) = c, secretary(m) = b;
} : S0

M = javascript {
	symbols
		Al -> "return \"Al\"",
		Akin -> "return \"Akin\"",
		Bob -> "return \"Bob\"",
		Bo -> "return \"Bo\"",
		Carl -> "return \"Carl\"",
		Cork -> "return \"Cork\"",
		Dan -> "return \"Dan\"",
		Dunn -> "return \"Dunn\"",
		Math -> "return \"Math\"",
		CS -> "return \"CS\"",
		zero -> "return 0",
		succ -> "return (input[0] + 1)",
		plus -> "return (input[0] + input[1])",
		length -> "return input[0].length",
		reverse -> "return input[0].split('').reverse().join('')",
		append -> "return input[0].concat(input[1])",
		print -> "return input[0].toString()";
} : T

I = instance S I0 M

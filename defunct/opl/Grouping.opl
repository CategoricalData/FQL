S0 = theory { 
 sorts
 	Dept, Emp, Nat;
 symbols
 	zero@0 : Nat, 
 	succ@1 : Nat -> Nat,
 	deptID@10 : Dept -> Nat,
	worksIn@8 : Emp -> Dept;
 equations;
}

S = schema {
	entities Dept, Emp;	
} : S0

Ty1 = types S 

JS1 = javascript {
	symbols zero -> "return 0",
		   succ -> "return input[0]+1";
} : Ty1

I0 = presentation {
	generators math, cs : Dept, david, patrick, ryan : Emp;
	equations
		worksIn(david)=math, worksIn(patrick)=math, worksIn(ryan)=cs,
		deptID(math)=0, deptID(cs)=1;
} : S0
I = instance S I0 JS1

S1x = theory { 
 sorts
 	Dept, Emp, Nat, SetOfEmp;
 symbols
 	zero@0 : Nat, 
 	succ@1 : Nat -> Nat,
 	deptID@10 : Dept -> Nat,
	worksIn@8 : Emp -> Dept,
	worksInID@9 : Nat -> SetOfEmp,
	emps@11 : Dept -> SetOfEmp;
 equations
  	forall x:Dept. emps(x) = worksInID(deptID(x));
}
S1 = schema {
		entities Dept, Emp;
} : S1x
Ty2 = types S1

//does not use knuth-bendix, but should?
JS2 = javascript {
	symbols zero -> "return 0",
		   succ -> "return input[0]+1",
	        worksInID -> "var util=Java.type('catdata.ide.Util'); 
	                      var chc=Java.type('catdata.Chc');
	                      var term=Java.type('catdata.opl.OplTerm');
	                      var wrap=Java.type('catdata.opl.JSWrapper');
	                      var revd = util.rev0(I.saturate().second.symbols.get('deptID'));
	                      var cand =  new term(chc.inRight(new wrap(input[0])), []);
	          	       var dept =  revd.get(cand)[0];    
	          	       var w = util.revS(I.saturate().second.symbols.get('worksIn'));
	          	       var u = w.get(dept); 
	          	       var list=Java.type('java.util.LinkedList');
	          	       var ret = new list();
	          	       for (var i = 0; i < u.size(); i++) {
	          	       	ret.add(new list(u)[i][0]);
	          	       }
	          	       return ret; ";
} : Ty2 

//requires to duplicate the instance
I1 = presentation {
	generators math, cs : Dept, david, patrick, ryan : Emp;
	equations
		worksIn(david)=math, worksIn(patrick)=math, worksIn(ryan)=cs,
		deptID(math)=0, deptID(cs)=1;
} : S1x

J = instance S1 I1 JS2

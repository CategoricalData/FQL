//configure OPL prover
preamble = pragma {
	options
		"opl_prover_force_prec" = "true", 
		"opl_prover_sort" = "false", 
		"opl_prover_compose" = "false", 
		"opl_prover_filter_subsumed" = "false";
} 

TypeSide = theory {
	sorts
		String, Bool;
	symbols
		tru, fals : Bool,
		alice, bob, charlie, doris, ellie, frank, gina, henry,
		book1, book2, book3, book4, book5, book6, book7 : String;
	equations;
}

Source = SCHEMA {
	entities
		Man, Woman;
	edges;
	attributes
		fav_book_m : Man -> String,
		fav_book_w : Woman -> String,
		name_m : Man -> String,
		name_w : Woman -> String,
		paying : Man -> Bool;
	pathEqualities;
	obsEqualities;
} : TypeSide

Target = SCHEMA {
	entities
		Male, GoodMatch, PayingGoodMatch;
	edges
		is_a : PayingGoodMatch -> GoodMatch,
		for_man : GoodMatch -> Male;
	attributes
		man_name : Male -> String,
		woman_name : GoodMatch -> String;
	pathEqualities;
	obsEqualities;
} : TypeSide

Q = query {
	
	GoodMatchQ = {
		for m:Man, w:Woman;
		where fav_book_m(m) = fav_book_w(w);
		return woman_name = name_w(w);
		keys for_man = {man = m} : MaleQ; 
	} : GoodMatch,

	MaleQ = {
		for man:Man;
		where;
		return man_name = name_m(man);
		keys; 
	} : Male,

	PayingGoodMatchQ = {
		for man:Man, woman:Woman;
		where fav_book_m(man) = fav_book_w(woman),
			 paying(man) = tru;
		return;
		keys is_a = {m = man, w = woman} : GoodMatchQ;	 
	} : PayingGoodMatch
	
} : Source -> Target

Q_as_sql = sql {

insert into Male
	select Man.name_m as man_name
	from Man;

insert into GoodMatch 
	select w.name_w as woman_name,
	       (m as Man) as for_man
     from Man as m, Woman as w
     where m.fav_book_m = w.fav_book_w;

insert into PayingGoodMatch
	select (Man as m, Woman as w) as is_a	 
	from Man, Woman
	where Man.fav_book_m = Woman.fav_book_w 
	  and Man.paying = tru
	
} : Source -> Target


I = INSTANCE {
	generators
		a, d, e, g : Woman,
		b, c, f, h : Man;
	equations
		name_m(b) = bob, paying(b) = tru, fav_book_m(b) = book1,
		name_m(c) = charlie, paying(c) = fals, fav_book_m(c) = book1,
		name_m(f) = frank, paying(f) = tru, fav_book_m(f) = book2,
		name_m(h) = henry, paying(h) = tru, fav_book_m(h) = book3,

		name_w(a) = alice, fav_book_w(a) = book1,
		name_w(d) = doris, fav_book_w(d) = book2,
		name_w(e) = ellie, fav_book_w(e) = book2,
		name_w(g) = gina, fav_book_w(g) = book4;		
} : Source

I_as_sql = tables {
	entities
		Man -> {b,c,f,h},
		Woman -> {a,d,e,g};
	edges;
	attributes
		paying -> {(b,tru),(c,fals),(f,tru),(h,tru)},
		name_m -> {(b,bob),(c,charlie),(f,frank),(h,henry)},
		name_w -> {(a,alice),(d,doris),(e,ellie),(g,gina)},
		fav_book_m -> {(b,book1),(c,book1),(f,book2),(h,book3)},
		fav_book_w -> {(a,book1),(d,book2),(e,book2),(g,book4)};	
} : Source

J = apply Q I

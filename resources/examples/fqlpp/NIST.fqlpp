//NIST example via Sub

//Portal A's schema
category ABig = {
 objects
  capability,
  capabilitycategories,
  capabilityequipment,
  capabilityindustry,
  capabilitymaterials,
  capabilityprocesses,
  capabilitytypesofmolds,
  equipmenttype,
  industry,
  material,
  moldtypes,
  process,
  productorservicecategory,
  supplier,
  suppliercapabilities,
  unitcode,
  string;
 arrows
  capability_Capability_Name: capability -> string,
  capability_Max_Length: capability -> string,
  capability_Production_Volume_Max: capability -> string,
  capability_Production_Volume_Min: capability -> string,
  capability_Tolerance: capability -> string,
  equipmenttype_EquipmentType_Name: equipmenttype -> string,
  industry_Industry_Name: industry -> string,
  material_Material_Name: material -> string,
  moldtypes_MoldTypes_Name: moldtypes -> string,
  process_Process_Name: process -> string,
  productorservicecategory_Category_Name: productorservicecategory -> string,
  productorservicecategory_isLeaf: productorservicecategory -> string,
  supplier_Note: supplier -> string,
  supplier_Source: supplier -> string,
  unitcode_Code: unitcode -> string,
  unitcode_Description: unitcode -> string,
// 
  capability_Max_Length_Unit: capability -> unitcode,
  capability_Parent_id: capability -> capability,
  capability_Production_Volume_Max_Unit: capability -> unitcode,
  capability_Production_Volume_Min_Unit: capability -> unitcode,
  capability_Tolerance_Unit: capability -> unitcode,
  capabilitycategories_Capability_id: capabilitycategories -> capability,
  capabilitycategories_ProductOrServiceCategory_id: capabilitycategories -> productorservicecategory,
  capabilityequipment_Capability_id: capabilityequipment -> capability,
  capabilityequipment_EquipmentType_id: capabilityequipment -> equipmenttype,
  capabilityindustry_Capability_id: capabilityindustry -> capability,
  capabilityindustry_Industry_id: capabilityindustry -> industry,
  capabilitymaterials_Capability_id: capabilitymaterials -> capability,
  capabilitymaterials_Material_id: capabilitymaterials -> material,
  capabilityprocesses_Capability_id: capabilityprocesses -> capability,
  capabilityprocesses_Process_id: capabilityprocesses -> process,
  capabilitytypesofmolds_Capability_id: capabilitytypesofmolds -> capability,
  capabilitytypesofmolds_MoldTypes_id: capabilitytypesofmolds -> moldtypes,
  productorservicecategory_Parent_id: productorservicecategory -> productorservicecategory,
  suppliercapabilities_Capability_id: suppliercapabilities -> capability,
  suppliercapabilities_Supplier_id: suppliercapabilities -> supplier;
 equations
  productorservicecategory.productorservicecategory_Parent_id.productorservicecategory_Parent_id.productorservicecategory_Parent_id = productorservicecategory.productorservicecategory_Parent_id.productorservicecategory_Parent_id.productorservicecategory_Parent_id.productorservicecategory_Parent_id,
  capability.capability_Parent_id.capability_Parent_id.capability_Parent_id = capability.capability_Parent_id.capability_Parent_id.capability_Parent_id.capability_Parent_id;
}

set A_adom = {"", "Recreational Vehicle", "Titanium Alloy Ti 6AI-4V", "1000 parts/pieces count", "Verticle CNC Milling Machine", "Aluminum", "15-4 Stainless Steel", "Cobalt", "Automotive", "Collapsible Core", "I used the types of molds values from the Canyon Plastics.", "Industrial Tools & Die", "Marine", "Stainless Steel", "Length measure in inches", "Consumer Goods", "CNC 3-axis Milling Machine", "300 Stainless Steel", "Non-Ferrous", "M2 Tool Steel", "17-4 Stainless Steel", "Electrode Machining", "A-6 Tool Steel", "Building/Construction", "Stainless Steel 302", "Jig Grinder", "0", "1", "D2 Tool Steel", "Ram EDM", "Medical", "CNC & Conventional Machining (turning & milling)", "Micro Hole EDM", "Surface Grinder", "20", "Extrusions", "0.000001", "Electrical Connectors", "Ferrous", "Machining", "1000", "Inch", "Castings", "Length measure in millimeters", "Custom Manufacturing & Fabricating", "Electrical Discharge Machining Services", "4140 Alloy Steels", "General machining", "Pro Mold", "Mold Design and Build", "Pre-hardened Steel", "Communication", "Dies & Molds", "Forgings", "Optical", "Liquid Silicone Molds", "Electronic", "Fully Hardened Tool Steel", "Klann Plastics and Canyon Plastics", "A-2 Tool Steel", "Tecomet", "This supplier has another capability registered under the Injection Molds category, but it is more about molding rather than making the mold. So I excluded that. It also has a separate capability profile about mold design that I excluded.", "Transfer/Compression (Rubber or Silicone)", "Music", "47.25", "4130 Tool Steel", "Titanium Alloy Ti 6AI-4V ELI", "40", "Plastics", "Bobs Design", "Small Hole EDM", "Wiegel Tool", "Sinker EDM", "Extrusion Dies", "Multi-Cavity/Family Injection Molds", "Forging Dies", "Wire EDM", "Prototype and Production Mold Design & Manufacturing", "316 Stainless Steel", "EDM", "H-13 Tool Steel", "Aerospace", "Columbium", "Possible error", "Titanium", "Honing Machine", "Custom  Molds for Plastic, Rubber, and Die Cast parts", "EA", "Each part/piece count", "B&B", "Stainless Steel 300 Series", "mm", "Plunger EDM", "NULL", "18.25", "Carbon Steel", "Tool Steel", "High Speed Small Hole EDM", "Alloy Steel", "S7 Tool Steel", "Die Cast Molds", "Machinery Tools & Supplies", "Wire Electrical Discharge Machining", "304 Stainless Steel", "1000000", "Industrial", "0.0025", "Brass", "0.001", "Hot Runners", "Injection Molds", "Plastic Injection", "NULL - WTF", "0.005", "CR/HR Steel", "Rotary Dies", "Titanium Alloy CP2", "Astro", "Titanium Alloy CP4", "Plastic Mold Making Services", "Chrome", "Electrical", "Inserts Only", "Engraving Machine", "Tool Steel 4340", "Thousands", "Lathe", "Others", "Blow Molds (Extrusion or Injection/Blow)", "Food Processing", "No unit", "CNC Machining", "Complex & Difficult Machining", "Commercial", "EDM Drilling", "Military/Government", "CNC 4-axis Milling Machine", "P-20" }

//Portal A's data
functor ABig_Inst = {
 objects
  unitcode -> {1, 2, 3, 4, 0, 999}, 
  productorservicecategory -> {1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20}, 
  equipmenttype -> {2, 3, 1, 8, 7, 9, 4, 6, 5, 10}, 
  industry -> {1, 2, 6, 4, 7, 8, 9, 5, 10, 11, 12, 13, 3, 14, 15, 16, 17}, 
  material -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41}, 
  moldtypes -> {1, 7, 8, 2, 3, 4, 9, 5, 6}, 
  process -> {1, 2, 3, 4, 5, 6, 7}, 
  supplier -> {1, 2, 3, 4, 5, 6, 7, 8}, 
  capability -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, 
  capabilitycategories -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, 
  capabilityequipment -> {1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17}, 
  capabilityindustry -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}, 
  capabilitymaterials -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88}, 
  capabilityprocesses -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20}, 
  capabilitytypesofmolds -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, 
  suppliercapabilities -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
  string -> A_adom;
 arrows
  unitcode_Code -> {(1, "EA"), (2, "Thousands"), (3, "Inch"), (4, "mm"), (0, "NULL"), (999, "NULL - WTF")}, 
  unitcode_Description -> {(1, "Each part/piece count"), (2, "1000 parts/pieces count"), (3, "Length measure in inches"), (4, "Length measure in millimeters"), (0, "No unit"), (999, "Possible error")}, 
  productorservicecategory_Category_Name -> {(1, "Custom Manufacturing & Fabricating"), (2, "Machining"), (3, "General machining"), (4, "Complex & Difficult Machining"), (6, "Sinker EDM"), (7, "Ram EDM"), (8, "Machinery Tools & Supplies"), (9, "Dies & Molds"), (10, "Injection Molds"), (12, "CNC Machining"), (13, "EDM"), (14, "Wire EDM"), (15, "Small Hole EDM"), (16, "Micro Hole EDM"), (17, "High Speed Small Hole EDM"), (18, "Forging Dies"), (19, "Extrusion Dies"), (20, "Rotary Dies")}, 
  productorservicecategory_isLeaf -> {(1, 0), (2, 0), (3, 0), (4, 0), (6, 1), (7, 1), (8, 0), (9, 0), (10, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 0)}, 
  equipmenttype_EquipmentType_Name -> {(2, "CNC 3-axis Milling Machine"), (3, "CNC 4-axis Milling Machine"), (1, "EDM"), (8, "Engraving Machine"), (7, "Honing Machine"), (9, "Jig Grinder"), (4, "Lathe"), (6, "Sinker EDM"), (5, "Surface Grinder"), (10, "Verticle CNC Milling Machine")}, 
  industry_Industry_Name -> {(1, "Aerospace"), (2, "Automotive"), (6, "Building/Construction"), (4, "Commercial"), (7, "Communication"), (8, "Consumer Goods"), (9, "Electrical"), (5, "Electrical Connectors"), (10, "Electronic"), (11, "Food Processing"), (12, "Industrial"), (13, "Marine"), (3, "Medical"), (14, "Military/Government"), (15, "Music"), (16, "Optical"), (17, "Recreational Vehicle")}, 
  material_Material_Name -> {(1, "4140 Alloy Steels"), (2, "A-2 Tool Steel"), (3, "H-13 Tool Steel"), (4, "Aluminum"), (5, "Stainless Steel"), (6, "Titanium"), (7, "Tool Steel"), (8, "Brass"), (9, "Cobalt"), (10, "A-6 Tool Steel"), (11, "Chrome"), (12, "Columbium"), (13, "Stainless Steel 300 Series"), (14, "Titanium Alloy Ti 6AI-4V"), (15, "Titanium Alloy Ti 6AI-4V ELI"), (16, "Titanium Alloy CP2"), (17, "Titanium Alloy CP4"), (18, "Carbon Steel"), (19, "Plastics"), (20, "Ferrous"), (21, "Non-Ferrous"), (22, "Castings"), (23, "Forgings"), (24, "Extrusions"), (25, "Alloy Steel"), (26, "S7 Tool Steel"), (27, "M2 Tool Steel"), (28, "D2 Tool Steel"), (29, "4130 Tool Steel"), (30, "Tool Steel 4340"), (31, "300 Stainless Steel"), (32, "Stainless Steel 302"), (33, "304 Stainless Steel"), (34, "316 Stainless Steel"), (35, "15-4 Stainless Steel"), (36, "17-4 Stainless Steel"), (37, "Others"), (38, "CR/HR Steel"), (39, "Pre-hardened Steel"), (40, "Fully Hardened Tool Steel"), (41, "P-20")}, 
  moldtypes_MoldTypes_Name -> {(1, "Blow Molds (Extrusion or Injection/Blow)"), (7, "Collapsible Core"), (8, "Die Cast Molds"), (2, "Hot Runners"), (3, "Inserts Only"), (4, "Liquid Silicone Molds"), (9, "Multi-Cavity/Family Injection Molds"), (5, "Plastic Injection"), (6, "Transfer/Compression (Rubber or Silicone)")}, 
  process_Process_Name -> {(1, "Sinker EDM"), (2, "Wire EDM"), (3, "Small Hole EDM"), (4, "EDM Drilling"), (5, "Electrode Machining"), (6, "Plunger EDM"), (7, "Ram EDM")}, 
  supplier_Source -> {(1, "B&B"), (2, "Tecomet"), (3, "Astro"), (4, "Bobs Design"), (5, "Wiegel Tool"), (6, "Industrial Tools & Die"), (7, "Pro Mold"), (8, "Klann Plastics and Canyon Plastics")}, 
  supplier_Note -> {(1, ""), (2, ""), (3, ""), (4, ""), (5, ""), (6, ""), (7, "This supplier has another capability registered under the Injection Molds category, but it is more about molding rather than making the mold. So I excluded that. It also has a separate capability profile about mold design that I excluded."), (8, "I used the types of molds values from the Canyon Plastics.")}, 
  capability_Capability_Name -> {(1, "CNC Machining"), (2, "CNC & Conventional Machining (turning & milling)"), (3, "Sinker EDM"), (4, "Wire EDM"), (5, "EDM"), (6, "Electrical Discharge Machining Services"), (7, "Wire Electrical Discharge Machining"), (8, "Custom  Molds for Plastic, Rubber, and Die Cast parts"), (9, "Prototype and Production Mold Design & Manufacturing"), (10, "Plastic Mold Making Services"), (11, "Mold Design and Build")}, 
  capability_Production_Volume_Min -> {(1, "NULL"), (2, 1), (3, "NULL"), (4, "NULL"), (5, "NULL"), (6, 1), (7, 1), (8, "NULL"), (9, "NULL"), (10, "NULL"), (11, "NULL")}, 
  capability_Production_Volume_Max -> {(1, "NULL"), (2, 1), (3, "NULL"), (4, "NULL"), (5, "NULL"), (6, 1000), (7, 1000000), (8, "NULL"), (9, "NULL"), (10, "NULL"), (11, "NULL")}, 
  capability_Max_Length -> {(1, 40), (2, "NULL"), (3, "47.25"), (4, "18.25"), (5, "NULL"), (6, 20), (7, 20), (8, "NULL"), (9, "NULL"), (10, "NULL"), (11, "NULL")}, 
  capability_Tolerance -> {(1, "NULL"), (2, "NULL"), (3, "0.001"), (4, "0.005"), (5, "NULL"), (6, "0.0025"), (7, "0.000001"), (8, "NULL"), (9, "NULL"), (10, "NULL"), (11, "NULL")},
 //
  productorservicecategory_Parent_id -> {(1, 1), (2, 1), (3, 2), (4, 3), (6, 13), (7, 13), (8, 8), (9, 8), (10, 9), (12, 2), (13, 2), (14, 13), (15, 13), (16, 13), (17, 13), (18, 9), (19, 9), (20, 9)}, 
  capability_Parent_id -> {(1, 1), (2, 2), (3, 5), (4, 5), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11)}, 
  capability_Production_Volume_Min_Unit -> {(1, 0), (2, 1), (3, 0), (4, 0), (5, 0), (6, 1), (7, 1), (8, 0), (9, 0), (10, 0), (11, 0)}, 
  capability_Production_Volume_Max_Unit -> {(1, 0), (2, 2), (3, 0), (4, 0), (5, 0), (6, 1), (7, 1), (8, 0), (9, 0), (10, 0), (11, 0)}, 
  capability_Max_Length_Unit -> {(1, 999), (2, 0), (3, 3), (4, 3), (5, 0), (6, 3), (7, 3), (8, 0), (9, 0), (10, 0), (11, 0)}, 
  capability_Tolerance_Unit -> {(1, 0), (2, 0), (3, 3), (4, 3), (5, 0), (6, 4), (7, 3), (8, 0), (9, 0), (10, 0), (11, 0)}, 
  capabilitycategories_Capability_id -> {(1, 1), (2, 1), (3, 2), (4, 2), (5, 3), (6, 4), (7, 5), (8, 6), (9, 6), (10, 6), (11, 7), (12, 7), (13, 7), (14, 7), (15, 2), (16, 8), (17, 9), (18, 10), (19, 11)}, 
  capabilitycategories_ProductOrServiceCategory_id -> {(1, 6), (2, 12), (3, 6), (4, 12), (5, 6), (6, 14), (7, 13), (8, 6), (9, 7), (10, 13), (11, 6), (12, 7), (13, 15), (14, 14), (15, 14), (16, 10), (17, 10), (18, 10), (19, 10)}, 
  capabilityequipment_Capability_id -> {(1, 8), (2, 8), (3, 9), (4, 9), (5, 9), (7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (12, 10), (13, 10), (16, 11), (17, 11)}, 
  capabilityequipment_EquipmentType_id -> {(1, 2), (2, 3), (3, 2), (4, 3), (5, 1), (7, 4), (8, 5), (9, 6), (10, 7), (11, 8), (12, 10), (13, 9), (16, 10), (17, 1)}, 
  capabilityindustry_Capability_id -> {(1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (11, 11), (12, 11), (13, 11), (14, 11), (15, 11), (16, 11), (17, 11), (18, 11), (19, 11), (20, 11), (21, 11), (22, 11), (23, 11), (24, 11)}, 
  capabilityindustry_Industry_id -> {(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 1), (7, 2), (8, 3), (9, 5), (10, 4), (11, 1), (12, 6), (13, 7), (14, 8), (15, 9), (16, 10), (17, 11), (18, 12), (19, 13), (20, 3), (21, 14), (22, 15), (23, 16), (24, 17)}, 
  capabilitymaterials_Capability_id -> {(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2), (15, 2), (16, 2), (17, 3), (18, 3), (19, 3), (20, 3), (21, 3), (22, 3), (23, 3), (24, 3), (25, 3), (26, 3), (27, 3), (28, 4), (29, 4), (30, 4), (31, 4), (32, 4), (33, 4), (34, 4), (35, 4), (36, 4), (37, 4), (38, 4), (40, 6), (41, 6), (42, 6), (43, 6), (44, 6), (45, 6), (46, 7), (47, 7), (48, 7), (49, 7), (50, 7), (51, 7), (52, 7), (53, 2), (55, 8), (56, 8), (57, 8), (58, 8), (59, 8), (60, 8), (61, 8), (62, 8), (63, 8), (64, 8), (65, 8), (66, 8), (67, 8), (68, 8), (69, 9), (70, 9), (71, 9), (72, 9), (73, 9), (74, 9), (75, 9), (76, 9), (77, 9), (78, 9), (79, 9), (80, 9), (81, 9), (82, 9), (83, 10), (85, 10), (86, 10), (87, 11), (88, 11)}, 
  capabilitymaterials_Material_id -> {(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 10), (9, 4), (10, 8), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 5), (19, 6), (20, 4), (21, 8), (22, 19), (23, 20), (24, 21), (25, 22), (26, 23), (27, 24), (28, 4), (29, 5), (30, 6), (31, 8), (32, 18), (33, 19), (34, 20), (35, 21), (36, 22), (37, 23), (38, 24), (40, 25), (41, 4), (42, 8), (43, 18), (44, 9), (45, 5), (46, 25), (47, 4), (48, 8), (49, 18), (50, 5), (51, 6), (52, 9), (53, 6), (55, 2), (56, 26), (57, 27), (58, 3), (59, 28), (60, 29), (61, 30), (62, 31), (63, 32), (64, 33), (65, 34), (66, 35), (67, 36), (68, 38), (69, 2), (70, 26), (71, 27), (72, 3), (73, 28), (74, 29), (75, 30), (76, 31), (77, 32), (78, 33), (79, 34), (80, 35), (81, 36), (82, 38), (83, 4), (85, 39), (86, 40), (87, 3), (88, 41)}, 
  capabilityprocesses_Capability_id -> {(1, 1), (2, 1), (3, 2), (4, 2), (5, 2), (6, 2), (7, 3), (8, 3), (9, 3), (10, 4), (11, 4), (12, 4), (13, 6), (14, 6), (15, 6), (16, 7), (18, 7), (19, 7), (20, 7)}, 
  capabilityprocesses_Process_id -> {(1, 1), (2, 2), (3, 2), (4, 1), (5, 6), (6, 7), (7, 1), (8, 2), (9, 3), (10, 1), (11, 2), (12, 3), (13, 1), (14, 2), (15, 3), (16, 2), (18, 4), (19, 5), (20, 1)}, 
  capabilitytypesofmolds_Capability_id -> {(1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (6, 10), (7, 11), (8, 11), (9, 11), (10, 11), (11, 11)}, 
  capabilitytypesofmolds_MoldTypes_id -> {(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 1), (8, 7), (9, 8), (10, 2), (11, 9)}, 
  suppliercapabilities_Supplier_id -> {(1, 1), (2, 1), (3, 3), (4, 3), (5, 3), (6, 4), (7, 5), (8, 6), (9, 6), (10, 7), (11, 8)}, 
  suppliercapabilities_Capability_id -> {(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11)};
} : ABig -> Set

//Rather than work with A's giant schema, we first migrate the data to a small subset of the schema
category A = {
	objects CM, M, C, string;
	arrows g : CM -> C, f : CM -> M, M_name : M -> string, C_name : C -> string;
	equations;
}
	
functor AToABig = {
	objects CM -> capabilitymaterials, M -> material, C -> capability, string -> string;
	arrows C_name -> capability.capability_Capability_Name, M_name -> material.material_Material_Name, f -> capabilitymaterials.capabilitymaterials_Material_id, g -> capabilitymaterials.capabilitymaterials_Capability_id;
} : A -> ABig

//the 'loaded' A instance
functor x = apply delta AToABig on object ABig_Inst 

////////////////////////////

//The schema for an 'is-a' instance
category B = {
	objects Material, string;
	arrows isa : Material -> Material, name : Material -> string;
	equations Material.isa.isa.isa.isa.isa = Material.isa.isa.isa.isa;
}

set Material_adom = {Material, Ceramic, Composite, Metal, Polymer, Crystalline, NonCrystalline, Glass, GlassCeramics, Ferrous, CastIron, DieSteel, Steel, ToolSteel, /* AlloySteel, */ StainlessSteel, NonFerrous, SuperAlloy, Stellite, Iconel, Hastelloy, Elastomer, Plastic, Hermoset, ThermoPlastic, Nylon, PVC, Polyester}

//The materials 'is-a' relationship
functor y = {
 objects 
  Material -> Material_adom, string -> Material_adom; 
 arrows
  name -> {(GlassCeramics,GlassCeramics), 
  (Glass,Glass), 
  (Crystalline,Crystalline),
  (NonCrystalline,NonCrystalline),
  (Ceramic,Ceramic), 
  (Composite,Composite),
  (Metal,Metal),
  (Ferrous,Ferrous),
  (NonFerrous,NonFerrous), 
  (SuperAlloy,SuperAlloy),
  (CastIron,CastIron), 
  (DieSteel,DieSteel), 
  (Steel,Steel),
  (ToolSteel,ToolSteel),
  //(AlloySteel,AlloySteel),
  (StainlessSteel,StainlessSteel), (NonFerrous,NonFerrous), (SuperAlloy,SuperAlloy), (Stellite,SuperAlloy), (Iconel,Iconel), (Hastelloy,Hastelloy), (Elastomer,Elastomer), (Plastic,Plastic), (Polymer,Polymer), (Hermoset,Hermoset), (ThermoPlastic,ThermoPlastic), (Nylon,Nylon), (PVC,PVC), (Polyester,Polyester), (Material,Material)},
  isa  -> {
  (GlassCeramics,NonCrystalline), 
  (Glass,NonCrystalline), 
  (Crystalline,Ceramic), 
  (NonCrystalline,Ceramic), 
  (Ceramic,Material), 
  (Composite,Material), 
  (Metal,Material), 
  (Ferrous,Metal), 
  (NonFerrous,Metal), 
  (SuperAlloy,Metal), 
  (CastIron,Ferrous), 
  (DieSteel,Ferrous),
  (Steel,Ferrous), 
  (ToolSteel,Ferrous),
  //(AlloySteel,Steel), 
//  (StainlessSteel,AlloySteel),
  (StainlessSteel,Steel),
  (NonFerrous,Metal), 
  (SuperAlloy,Metal),
  (Stellite,SuperAlloy), 
  (Iconel,SuperAlloy), 
  (Hastelloy,SuperAlloy),
  (Elastomer,Polymer), 
  (Plastic,Polymer), 
  (Polymer,Material),
  (Hermoset,Plastic), 
  (ThermoPlastic,Plastic),
  (Nylon,ThermoPlastic), 
  (PVC,ThermoPlastic), 
  (Polyester,ThermoPlastic),
  (Material,Material)};
} : B -> Set

///////////////////////////
//Next, we construct an integrated 'pushout' schema D, roughly, A union B

category D = {
	objects CM, M, C, string;
	arrows g : CM -> C, f : CM -> M, P : M -> M, M_name : M -> string, C_name : C -> string;
	equations M.P.P.P = M.P.P;
}

functor h = {
	objects CM -> CM, M -> M, C -> C, string -> string;
	arrows g -> CM.g, f -> CM.f, M_name -> M.M_name, C_name -> C.C_name;
} : A -> D

functor i = {
	objects Material -> M, string -> string ;
	arrows isa -> M.P, name -> M.M_name;
} : B -> D

///////////////////////////////////
//Now, we find the overlap schema C, roughly, A intersect B - with just one node, "material"

category C = {
	objects M;
	arrows;
	equations;
}

functor f = {
	objects M -> M;
	arrows;
} : C -> A

functor g = {
	objects M -> Material;
	arrows;
} : C -> B

//we pull back the A and B data onto C
functor fx = (f ; x) 
functor gy = (g ; y)

// Instance z and transforms zfx and zgy contains the 'overlap' between A and C - the synonymns.
/*(5, "Stainless Steel") and StainlessSteel
  (7, "tool steel") and ToolSteel
  (19, "Plastics") and Plastic
  (20, "Ferrous") and Ferrous
  (1, "4140 Alloy Steels") and AlloySteel

  (31, "300 Stainless Steel"), 
  (32, "Stainless Steel 302"), 
  (33, "304 Stainless Steel"), 
  (34, "316 Stainless Steel"), 
  (35, "15-4 Stainless Steel"), 
  (36, "17-4 Stainless Steel") and Stainless Steel
 */
functor z = {
	objects
		M->{5,7,19,20,/*1,*/31,32,33,34,35,36};
	arrows;
} : C -> Set

transform zfx = {
	objects
		M->{(5,5),(7,7),(19,19),(20,20),/*(1,1),*/(31,31),(32,32),(33,33),(34,34),(35,35),(36,36)};
} : (z:C->Set) -> (fx:C->Set)

transform zgy = {
	objects
		M->{(5,StainlessSteel),(7,ToolSteel),(19,Plastic),(20,Ferrous),/*(1,AlloySteel),*/
		    (31,StainlessSteel),(32,StainlessSteel),(33,StainlessSteel),(34,StainlessSteel),(35,StainlessSteel),(36,StainlessSteel)};
} : (z:C->Set) -> (gy:C->Set)

//Next, we have to massage zfx and zgy into transforms on D, rather than C, and then take 
//their pushout.  Due to oversights in the design of FQL++, this takes about 15 minutes.
//So instead, this section is commented out, and the data has been input directly.
/*
functor sigmahx = apply sigma h on object x
functor sigmaiy = apply sigma i on object y
functor sigmafhz= apply sigma (f ; h) on object z
functor fhsigmahx = (f; (h; apply sigma h on object x))

transform t0a = apply return sigma delta h on x
transform t0b = apply delta f on arrow t0a
transform t0c = (zfx ; t0b) //end david
transform t1g = apply sigma (f;h) on arrow t0c
transform t1h = apply coreturn sigma delta (f;h) on sigmahx
transform t1i = (t1g ; t1h)

transform s0a = apply return sigma delta i on y
transform s0b = apply delta g on arrow s0a
transform s0c = (zgy ; s0b) //end david
transform s1g = apply sigma (g;i) on arrow s0c
transform s1h = apply coreturn sigma delta (g;i) on sigmaiy
transform s1i = (s1g ; s1h)

functor preanswer = pushout t1i s1i
*/

//this is the data computed by the pushout.
functor preanswer = {
objects
	 C -> {"[(C, B):[C:6]]", "[(C, B):[C:5]]", "[(C, B):[C:8]]", "[(C, B):[C:7]]", "[(C, B):[C:2]]", "[(C, B):[C:10]]", "[(C, B):[C:1]]", "[(C, B):[C:11]]", "[(C, B):[C:4]]", "[(C, B):[C:3]]", "[(C, B):[C:9]]"}
	 ,string -> {"[(string, C):[string:ThermoPlastic]]", "[(string, B):[string:Titanium]]", "[(string, B):[string:Wiegel Tool]]", "[(string, B):[CM:16, CM.f.P.M_name]]", "[(string, B):[string:Electrical Discharge Machining Services]]", "[(string, B):[string:Thousands]]", "[(string, B):[string:18.25]]", "[(string, B):[string:I used the types of molds values from the Canyon Plastics.]]", "[(string, B):[CM:47, CM.f.P.M_name]]", "[(string, B):[CM:44, CM.f.P.P.M_name]]", "[(string, B):[CM:47, CM.f.P.P.M_name]]", "[(string, B):[CM:26, CM.f.P.M_name]]", "[(string, B):[string:Others]]", "[(string, B):[string:Hot Runners]]", "[(string, B):[CM:1, CM.f.P.P.M_name]]", "[(string, B):[string:Brass]]", "[(string, B):[string:Sinker EDM]]", "[(string, B):[string:Medical]]", "[(string, B):[string:1000 parts/pieces count]]", "[(string, B):[string:Stainless Steel 300 Series]]", "[(string, C):[string:Hermoset]]", "[(string, B):[CM:57, CM.f.P.M_name]]", "[(string, B):[string:47.25]]", "[(string, B):[string:General machining]]", "[(string, B):[string:Electrode Machining]]", "[(string, B):[CM:62, CM.f.P.P.M_name]]", "[(string, B):[string:0.0025]]", "[(string, B):[string:Food Processing]]", "[(string, B):[string:Plastic Mold Making Services]]", "[(string, B):[string:Military/Government]]", "[(string, B):[CM:88, CM.f.P.M_name]]", "[(string, B):[string:NULL - WTF]]", "[(string, B):[CM:58, CM.f.P.P.M_name]]", "[(string, B):[CM:85, CM.f.P.P.M_name]]", "[(string, C):[string:Nylon]]", "[(string, B):[string:A-6 Tool Steel]]", "[(string, B):[string:0.001]]", "[(string, B):[CM:46, CM.f.P.M_name]]", "[(string, B):[string:Tecomet]]", "[(string, B):[string:Surface Grinder]]", "[(string, B):[CM:56, CM.f.P.P.M_name]]", "[(string, B):[CM:12, CM.f.P.M_name]]", "[(string, B):[string:Aerospace]]", "[(string, B):[string:Aluminum]]", "[(string, B):[string:Electronic]]", "[(string, B):[string:NULL]]", "[(string, B):[string:Ram EDM]]", "[(string, B):[string:S7 Tool Steel]]", "[(string, B):[string:Engraving Machine]]", "[(string, B):[string:Non-Ferrous]]", "[(string, B):[string:Communication]]", "[(string, B):[string:1]]", "[(string, B):[string:Inch]]", "[(string, B):[string:Fully Hardened Tool Steel]]", "[(string, B):[CM:27, CM.f.P.M_name]]", "[(string, B):[string:20]]", "[(string, B):[string:CNC & Conventional Machining (turning & milling)]]", "[(string, B):[string:Titanium Alloy Ti 6AI-4V ELI]]", "[(string, B):[string:4130 Tool Steel]]", "[(string, B):[CM:61, CM.f.P.P.M_name]]", "[(string, B):[string:Multi-Cavity/Family Injection Molds]]", "[(string, B):[M:11, M.P.M_name]]", "[(string, B):[CM:58, CM.f.P.M_name]]", "[(string, B):[string:EDM]]", "[(string, B):[CM:88, CM.f.P.P.M_name]]", "[(string, C):[string:Elastomer]]", "[(string, B):[string:H-13 Tool Steel]]", "[(string, B):[string:Collapsible Core]]", "[(string, B):[string:Blow Molds (Extrusion or Injection/Blow)]]", "[(string, B):[string:Plunger EDM]]", "[(string, B):[M:11, M.P.P.M_name]]", "[(string, B):[string:Length measure in inches]]", "[(string, B):[string:Mold Design and Build]]", "[(string, B):[CM:25, CM.f.P.M_name]]", "[(string, B):[CM:68, CM.f.P.M_name]]", "[(string, C):[string:Glass]]", "[(string, B):[string:0.000001]]", "[(string, B):[string:0]]", "[(string, B):[string:Prototype and Production Mold Design & Manufacturing]]", "[(string, B):[string:Consumer Goods]]", "[(string, B):[M:37, M.P.P.M_name]]", "[(string, B):[string:Marine]]", "[(string, C):[string:CastIron]]", "[(string, B):[string:Honing Machine]]", "[(string, B):[string:Wire Electrical Discharge Machining]]", "[(string, B):[string:EDM Drilling]]", "[(string, B):[CM:11, CM.f.P.M_name]]", "[(string, B):[string:Automotive]]", "[(string, B):[string:Electrical Connectors]]", "[(string, B):[string:1000]]", "[(string, B):[string:CNC 3-axis Milling Machine]]", "[(string, B):[string:Bobs Design]]", "[(string, B):[string:Wire EDM]]", "[(string, B):[string:Tool Steel 4340]]", "[(string, B):[string:Klann Plastics and Canyon Plastics]]", "[(string, B):[string:Alloy Steel]]", "[(string, B):[string:Castings]]", "[(string, B):[string:Pro Mold]]", "[(string, B):[string:Electrical]]", "[(string, B):[string:]]", "[(string, B):[CM:14, CM.f.P.M_name]]", "[(string, B):[string:P-20]]", "[(string, B):[string:Machinery Tools & Supplies]]", "[(string, B):[string:Pre-hardened Steel]]", "[(string, C):[string:NonFerrous]]", "[(string, B):[string:Micro Hole EDM]]", "[(string, B):[string:Optical]]", "[(string, B):[string:CR/HR Steel]]", "[(string, B):[CM:86, CM.f.P.P.M_name]]", "[(string, B):[CM:24, CM.f.P.M_name]]", "[(string, B):[string:Die Cast Molds]]", "[(string, B):[CM:57, CM.f.P.P.M_name]]", "[(string, B):[string:Dies & Molds]]", "[(string, B):[string:Tool Steel]]", "[(string, C):[string:Polyester]]", "[(string, B):[string:Complex & Difficult Machining]]", "[(string, C):[string:Stellite]]", "[(string, B):[CM:59, CM.f.P.M_name]]", "[(string, B):[string:Each part/piece count]]", "[(string, B):[string:M2 Tool Steel]]", "[(string, B):[string:Machining]]", "[(string, C):[string:PVC]]", "[(string, B):[string:CNC Machining]]", "[(string, B):[CM:85, CM.f.P.M_name]]", "[(string, B):[string:Liquid Silicone Molds]]", "[(string, B):[CM:48, CM.f.P.P.M_name]]", "[(string, B):[string:Jig Grinder]]", "[(string, B):[CM:65, CM.f.P.M_name]]", "[(string, B):[string:1000000]]", "[(string, B):[string:Extrusions]]", "[(string, B):[string:High Speed Small Hole EDM]]", "[(string, B):[CM:49, CM.f.P.M_name]]", "[(string, B):[string:Forging Dies]]", "[(string, C):[string:Crystalline]]", "[(string, B):[CM:44, CM.f.P.M_name]]", "[(string, B):[string:Titanium Alloy Ti 6AI-4V]]", "[(string, B):[CM:1, CM.f.P.M_name]]", "[(string, B):[string:Cobalt]]", "[(string, B):[string:0.005]]", "[(string, B):[string:A-2 Tool Steel]]", "[(string, B):[string:Music]]", "[(string, B):[string:Titanium Alloy CP4]]", "[(string, B):[CM:60, CM.f.P.M_name]]", "[(string, B):[string:Columbium]]", "[(string, B):[CM:55, CM.f.P.M_name]]", "[(string, B):[string:Lathe]]", "[(string, B):[CM:51, CM.f.P.M_name]]", "[(string, B):[string:Forgings]]", "[(string, B):[string:D2 Tool Steel]]", "[(string, B):[string:Injection Molds]]", "[(string, B):[string:Recreational Vehicle]]", "[(string, B):[string:EA]]", "[(string, B):[CM:68, CM.f.P.P.M_name]]", "[(string, C):[string:Composite]]", "[(string, B):[string:mm]]", "[(string, B):[CM:60, CM.f.P.P.M_name]]", "[(string, B):[CM:15, CM.f.P.M_name]]", "[(string, B):[string:304 Stainless Steel]]", "[(string, B):[CM:59, CM.f.P.P.M_name]]", "[(string, B):[M:37, M.P.M_name]]", "[(string, B):[string:No unit]]", "[(string, C):[string:SuperAlloy]]", "[(string, B):[string:Inserts Only]]", "[(string, B):[string:Transfer/Compression (Rubber or Silicone)]]", "[(string, B):[CM:26, CM.f.P.P.M_name]]", "[(string, B):[CM:55, CM.f.P.P.M_name]]", "[(string, B):[CM:51, CM.f.P.P.M_name]]", "[(string, B):[string:Astro]]", "[(string, B):[CM:8, CM.f.P.P.M_name]]", "[(string, B):[CM:86, CM.f.P.M_name]]", "[(string, C):[string:Hastelloy]]", "[(string, B):[CM:46, CM.f.P.P.M_name]]", "[(string, B):[CM:49, CM.f.P.P.M_name]]", "[(string, B):[CM:13, CM.f.P.M_name]]", "[(string, B):[string:CNC 4-axis Milling Machine]]", "[(string, B):[string:Plastic Injection]]", "[(string, B):[string:Small Hole EDM]]", "[(string, B):[string:Length measure in millimeters]]", "[(string, C):[string:Iconel]]", "[(string, B):[string:40]]", "[(string, B):[string:Extrusion Dies]]", "[(string, B):[string:Rotary Dies]]", "[(string, B):[string:Building/Construction]]", "[(string, C):[string:DieSteel]]", "[(string, B):[string:Custom Manufacturing & Fabricating]]", "[(string, B):[string:This supplier has another capability registered under the Injection Molds category, but it is more about molding rather than making the mold. So I excluded that. It also has a separate capability profile about mold design that I excluded.]]", "[(string, B):[CM:61, CM.f.P.M_name]]", "[(string, C):[string:NonCrystalline]]", "[(string, B):[string:Chrome]]", "[(string, B):[string:Verticle CNC Milling Machine]]", "[(string, B):[string:Titanium Alloy CP2]]", "[(string, B):[string:B&B]]", "[(string, B):[CM:8, CM.f.P.M_name]]", "[(string, B):[CM:27, CM.f.P.P.M_name]]", "[(string, B):[string:Custom  Molds for Plastic, Rubber, and Die Cast parts]]", "[(string, B):[CM:25, CM.f.P.P.M_name]]", "[(string, B):[string:Industrial Tools & Die]]", "[(string, C):[string:GlassCeramics]]", "[(string, B):[string:Industrial]]", "[(string, B):[CM:24, CM.f.P.P.M_name]]", "[(string, B):[CM:56, CM.f.P.M_name]]", "[(string, B):[string:4140 Alloy Steels]]", "[(string, B):[CM:48, CM.f.P.M_name]]", "[(string, B):[string:Carbon Steel]]", "[(string, B):[CM:12, CM.f.P.P.M_name]]", "[(string, B):[string:Possible error]]", "[(string, B):[CM:11, CM.f.P.P.M_name]]", "[(string, B):[CM:16, CM.f.P.P.M_name]]", "[(string, B):[string:Commercial]]", "[(string, B):[CM:13, CM.f.P.P.M_name]]", "[(string, B):[CM:14, CM.f.P.P.M_name]]", "[(string, B):[CM:15, CM.f.P.P.M_name]]"}
	 ,CM -> {"[(CM, B):[CM:68]]", "[(CM, B):[CM:22]]", "[(CM, B):[CM:45]]", "[(CM, B):[CM:66]]", "[(CM, B):[CM:43]]", "[(CM, B):[CM:24]]", "[(CM, B):[CM:64]]", "[(CM, B):[CM:41]]", "[(CM, B):[CM:62]]", "[(CM, B):[CM:20]]", "[(CM, B):[CM:60]]", "[(CM, B):[CM:19]]", "[(CM, B):[CM:38]]", "[(CM, B):[CM:15]]", "[(CM, B):[CM:59]]", "[(CM, B):[CM:36]]", "[(CM, B):[CM:17]]", "[(CM, B):[CM:57]]", "[(CM, B):[CM:34]]", "[(CM, B):[CM:11]]", "[(CM, B):[CM:78]]", "[(CM, B):[CM:55]]", "[(CM, B):[CM:32]]", "[(CM, B):[CM:13]]", "[(CM, B):[CM:76]]", "[(CM, B):[CM:30]]", "[(CM, B):[CM:53]]", "[(CM, B):[CM:74]]", "[(CM, B):[CM:72]]", "[(CM, B):[CM:51]]", "[(CM, B):[CM:70]]", "[(CM, B):[CM:3]]", "[(CM, B):[CM:80]]", "[(CM, B):[CM:1]]", "[(CM, B):[CM:82]]", "[(CM, B):[CM:7]]", "[(CM, B):[CM:29]]", "[(CM, B):[CM:5]]", "[(CM, B):[CM:86]]", "[(CM, B):[CM:88]]", "[(CM, B):[CM:25]]", "[(CM, B):[CM:9]]", "[(CM, B):[CM:69]]", "[(CM, B):[CM:48]]", "[(CM, B):[CM:27]]", "[(CM, B):[CM:67]]", "[(CM, B):[CM:21]]", "[(CM, B):[CM:46]]", "[(CM, B):[CM:65]]", "[(CM, B):[CM:44]]", "[(CM, B):[CM:23]]", "[(CM, B):[CM:63]]", "[(CM, B):[CM:42]]", "[(CM, B):[CM:61]]", "[(CM, B):[CM:40]]", "[(CM, B):[CM:18]]", "[(CM, B):[CM:14]]", "[(CM, B):[CM:58]]", "[(CM, B):[CM:37]]", "[(CM, B):[CM:16]]", "[(CM, B):[CM:79]]", "[(CM, B):[CM:56]]", "[(CM, B):[CM:35]]", "[(CM, B):[CM:10]]", "[(CM, B):[CM:77]]", "[(CM, B):[CM:33]]", "[(CM, B):[CM:12]]", "[(CM, B):[CM:52]]", "[(CM, B):[CM:75]]", "[(CM, B):[CM:31]]", "[(CM, B):[CM:73]]", "[(CM, B):[CM:50]]", "[(CM, B):[CM:71]]", "[(CM, B):[CM:4]]", "[(CM, B):[CM:2]]", "[(CM, B):[CM:81]]", "[(CM, B):[CM:8]]", "[(CM, B):[CM:83]]", "[(CM, B):[CM:6]]", "[(CM, B):[CM:85]]", "[(CM, B):[CM:87]]", "[(CM, B):[CM:26]]", "[(CM, B):[CM:49]]", "[(CM, B):[CM:47]]", "[(CM, B):[CM:28]]"}
	 ,M -> {"[(M, B):[CM:88, CM.f.P]]", "[(M, B):[M:37, M.P.P]]", "[(M, C):[Material:Iconel]]", "[(M, C):[Material:Hermoset]]", "[(M, B):[CM:27, CM.f.P]]", "[(M, B):[M:12]]", "[(M, B):[M:4]]", "[(M, B):[CM:13, CM.f.P]]", "[(M, B):[CM:51, CM.f.P]]", "[(M, C):[Material:Stellite]]", "[(M, B):[M:39]]", "[(M, B):[CM:58, CM.f.P]]", "[(M, B):[M:16]]", "[(M, B):[M:8]]", "[(M, B):[CM:1, CM.f.P.P]]", "[(M, C):[Material:Glass]]", "[(M, B):[CM:59, CM.f.P]]", "[(M, C):[Material:Hastelloy]]", "[(M, B):[M:27]]", "[(M, B):[M:23]]", "[(M, B):[CM:49, CM.f.P]]", "[(M, B):[CM:60, CM.f.P]]", "[(M, C):[Material:NonFerrous]]", "[(M, C):[Material:Crystalline]]", "[(M, C):[Material:CastIron]]", "[(M, C):[Material:DieSteel]]", "[(M, B):[CM:86, CM.f.P]]", "[(M, C):[Material:Composite]]", "[(M, B):[M:3]]", "[(M, B):[M:38]]", "[(M, B):[M:11]]", "[(M, C):[Material:Nylon]]", "[(M, B):[M:15]]", "[(M, B):[CM:48, CM.f.P]]", "[(M, B):[M:30]]", "[(M, B):[CM:56, CM.f.P]]", "[(M, B):[CM:56, CM.f.P.P]]", "[(M, C):[Material:PVC]]", "[(M, B):[CM:55, CM.f.P.P]]", "[(M, B):[CM:12, CM.f.P.P]]", "[(M, B):[M:26]]", "[(M, C):[Material:Elastomer]]", "[(M, B):[M:22]]", "[(M, B):[CM:12, CM.f.P]]", "[(M, B):[CM:13, CM.f.P.P]]", "[(M, B):[CM:15, CM.f.P]]", "[(M, B):[CM:25, CM.f.P]]", "[(M, B):[CM:14, CM.f.P.P]]", "[(M, B):[CM:57, CM.f.P.P]]", "[(M, B):[M:41]]", "[(M, B):[CM:16, CM.f.P.P]]", "[(M, B):[CM:58, CM.f.P.P]]", "[(M, B):[CM:59, CM.f.P.P]]", "[(M, A):[M:36]]", "[(M, B):[CM:15, CM.f.P.P]]", "[(M, B):[M:18]]", "[(M, B):[CM:11, CM.f.P.P]]", "[(M, B):[M:37]]", "[(M, B):[M:10]]", "[(M, B):[M:2]]", "[(M, B):[M:14]]", "[(M, B):[M:6]]", "[(M, B):[CM:16, CM.f.P]]", "[(M, A):[M:7]]", "[(M, B):[CM:51, CM.f.P.P]]", "[(M, B):[CM:24, CM.f.P]]", "[(M, B):[CM:55, CM.f.P]]", "[(M, B):[CM:68, CM.f.P]]", "[(M, B):[M:29]]", "[(M, B):[CM:61, CM.f.P]]", "[(M, B):[M:25]]", "[(M, B):[CM:46, CM.f.P]]", "[(M, B):[M:21]]", "[(M, C):[Material:Polyester]]", "[(M, B):[CM:8, CM.f.P]]", "[(M, C):[Material:ThermoPlastic]]", "[(M, B):[M:40]]", "[(M, B):[CM:1, CM.f.P]]", "[(M, B):[M:9]]", "[(M, B):[CM:26, CM.f.P]]", "[(M, B):[M:11, M.P.P]]", "[(M, B):[CM:14, CM.f.P]]", "[(M, B):[CM:8, CM.f.P.P]]", "[(M, B):[M:11, M.P]]", "[(M, B):[M:13]]", "[(M, C):[Material:GlassCeramics]]", "[(M, C):[Material:NonCrystalline]]", "[(M, B):[M:1]]", "[(M, B):[CM:86, CM.f.P.P]]", "[(M, B):[M:17]]", "[(M, B):[CM:85, CM.f.P.P]]", "[(M, B):[CM:60, CM.f.P.P]]", "[(M, B):[CM:61, CM.f.P.P]]", "[(M, B):[CM:11, CM.f.P]]", "[(M, B):[M:37, M.P]]", "[(M, B):[CM:49, CM.f.P.P]]", "[(M, A):[M:34, M.P.P]]", "[(M, B):[CM:85, CM.f.P]]", "[(M, B):[CM:47, CM.f.P]]", "[(M, B):[CM:88, CM.f.P.P]]", "[(M, B):[CM:44, CM.f.P.P]]", "[(M, B):[M:28]]", "[(M, C):[Material:SuperAlloy]]", "[(M, B):[CM:24, CM.f.P.P]]", "[(M, B):[M:24]]", "[(M, B):[CM:57, CM.f.P]]", "[(M, B):[CM:46, CM.f.P.P]]", "[(M, B):[CM:25, CM.f.P.P]]", "[(M, B):[CM:68, CM.f.P.P]]", "[(M, B):[CM:47, CM.f.P.P]]", "[(M, B):[CM:44, CM.f.P]]", "[(M, A):[M:36, M.P]]", "[(M, B):[CM:48, CM.f.P.P]]", "[(M, B):[CM:27, CM.f.P.P]]", "[(M, B):[CM:26, CM.f.P.P]]"}
; arrows
	 g -> {("[(CM, B):[CM:68]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:22]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:45]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:66]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:43]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:24]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:64]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:41]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:62]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:20]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:60]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:19]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:38]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:15]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:59]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:36]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:17]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:57]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:34]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:11]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:78]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:55]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:32]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:13]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:76]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:30]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:53]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:74]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:72]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:51]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:70]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:3]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:80]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:1]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:82]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:7]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:29]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:5]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:86]]", "[(C, B):[C:10]]"), ("[(CM, B):[CM:88]]", "[(C, B):[C:11]]"), ("[(CM, B):[CM:25]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:9]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:69]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:48]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:27]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:67]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:21]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:46]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:65]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:44]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:23]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:63]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:42]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:61]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:40]]", "[(C, B):[C:6]]"), ("[(CM, B):[CM:18]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:14]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:58]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:37]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:16]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:79]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:56]]", "[(C, B):[C:8]]"), ("[(CM, B):[CM:35]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:10]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:77]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:33]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:12]]", "[(C, B):[C:2]]"), ("[(CM, B):[CM:52]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:75]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:31]]", "[(C, B):[C:4]]"), ("[(CM, B):[CM:73]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:50]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:71]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:4]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:2]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:81]]", "[(C, B):[C:9]]"), ("[(CM, B):[CM:8]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:83]]", "[(C, B):[C:10]]"), ("[(CM, B):[CM:6]]", "[(C, B):[C:1]]"), ("[(CM, B):[CM:85]]", "[(C, B):[C:10]]"), ("[(CM, B):[CM:87]]", "[(C, B):[C:11]]"), ("[(CM, B):[CM:26]]", "[(C, B):[C:3]]"), ("[(CM, B):[CM:49]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:47]]", "[(C, B):[C:7]]"), ("[(CM, B):[CM:28]]", "[(C, B):[C:4]]")}
	 ,M_name -> {("[(M, B):[CM:88, CM.f.P]]", "[(string, B):[CM:88, CM.f.P.M_name]]"), ("[(M, B):[M:37, M.P.P]]", "[(string, B):[M:37, M.P.P.M_name]]"), ("[(M, C):[Material:Iconel]]", "[(string, C):[string:Iconel]]"), ("[(M, C):[Material:Hermoset]]", "[(string, C):[string:Hermoset]]"), ("[(M, B):[CM:27, CM.f.P]]", "[(string, B):[CM:27, CM.f.P.M_name]]"), ("[(M, B):[M:12]]", "[(string, B):[string:Columbium]]"), ("[(M, B):[M:4]]", "[(string, B):[string:Aluminum]]"), ("[(M, B):[CM:13, CM.f.P]]", "[(string, B):[CM:13, CM.f.P.M_name]]"), ("[(M, B):[CM:51, CM.f.P]]", "[(string, B):[CM:51, CM.f.P.M_name]]"), ("[(M, C):[Material:Stellite]]", "[(string, C):[string:SuperAlloy]]"), ("[(M, B):[M:39]]", "[(string, B):[string:Pre-hardened Steel]]"), ("[(M, B):[CM:58, CM.f.P]]", "[(string, B):[CM:58, CM.f.P.M_name]]"), ("[(M, B):[M:16]]", "[(string, B):[string:Titanium Alloy CP2]]"), ("[(M, B):[M:8]]", "[(string, B):[string:Brass]]"), ("[(M, B):[CM:1, CM.f.P.P]]", "[(string, B):[CM:1, CM.f.P.P.M_name]]"), ("[(M, C):[Material:Glass]]", "[(string, C):[string:Glass]]"), ("[(M, B):[CM:59, CM.f.P]]", "[(string, B):[CM:59, CM.f.P.M_name]]"), ("[(M, C):[Material:Hastelloy]]", "[(string, C):[string:Hastelloy]]"), ("[(M, B):[M:27]]", "[(string, B):[string:M2 Tool Steel]]"), ("[(M, B):[M:23]]", "[(string, B):[string:Forgings]]"), ("[(M, B):[CM:49, CM.f.P]]", "[(string, B):[CM:49, CM.f.P.M_name]]"), ("[(M, B):[CM:60, CM.f.P]]", "[(string, B):[CM:60, CM.f.P.M_name]]"), ("[(M, C):[Material:NonFerrous]]", "[(string, C):[string:NonFerrous]]"), ("[(M, C):[Material:Crystalline]]", "[(string, C):[string:Crystalline]]"), ("[(M, C):[Material:CastIron]]", "[(string, C):[string:CastIron]]"), ("[(M, C):[Material:DieSteel]]", "[(string, C):[string:DieSteel]]"), ("[(M, B):[CM:86, CM.f.P]]", "[(string, B):[CM:86, CM.f.P.M_name]]"), ("[(M, C):[Material:Composite]]", "[(string, C):[string:Composite]]"), ("[(M, B):[M:3]]", "[(string, B):[string:H-13 Tool Steel]]"), ("[(M, B):[M:38]]", "[(string, B):[string:CR/HR Steel]]"), ("[(M, B):[M:11]]", "[(string, B):[string:Chrome]]"), ("[(M, C):[Material:Nylon]]", "[(string, C):[string:Nylon]]"), ("[(M, B):[M:15]]", "[(string, B):[string:Titanium Alloy Ti 6AI-4V ELI]]"), ("[(M, B):[CM:48, CM.f.P]]", "[(string, B):[CM:48, CM.f.P.M_name]]"), ("[(M, B):[M:30]]", "[(string, B):[string:Tool Steel 4340]]"), ("[(M, B):[CM:56, CM.f.P]]", "[(string, B):[CM:56, CM.f.P.M_name]]"), ("[(M, B):[CM:56, CM.f.P.P]]", "[(string, B):[CM:56, CM.f.P.P.M_name]]"), ("[(M, C):[Material:PVC]]", "[(string, C):[string:PVC]]"), ("[(M, B):[CM:55, CM.f.P.P]]", "[(string, B):[CM:55, CM.f.P.P.M_name]]"), ("[(M, B):[CM:12, CM.f.P.P]]", "[(string, B):[CM:12, CM.f.P.P.M_name]]"), ("[(M, B):[M:26]]", "[(string, B):[string:S7 Tool Steel]]"), ("[(M, C):[Material:Elastomer]]", "[(string, C):[string:Elastomer]]"), ("[(M, B):[M:22]]", "[(string, B):[string:Castings]]"), ("[(M, B):[CM:12, CM.f.P]]", "[(string, B):[CM:12, CM.f.P.M_name]]"), ("[(M, B):[CM:13, CM.f.P.P]]", "[(string, B):[CM:13, CM.f.P.P.M_name]]"), ("[(M, B):[CM:15, CM.f.P]]", "[(string, B):[CM:15, CM.f.P.M_name]]"), ("[(M, B):[CM:25, CM.f.P]]", "[(string, B):[CM:25, CM.f.P.M_name]]"), ("[(M, B):[CM:14, CM.f.P.P]]", "[(string, B):[CM:14, CM.f.P.P.M_name]]"), ("[(M, B):[CM:57, CM.f.P.P]]", "[(string, B):[CM:57, CM.f.P.P.M_name]]"), ("[(M, B):[M:41]]", "[(string, B):[string:P-20]]"), ("[(M, B):[CM:16, CM.f.P.P]]", "[(string, B):[CM:16, CM.f.P.P.M_name]]"), ("[(M, B):[CM:58, CM.f.P.P]]", "[(string, B):[CM:58, CM.f.P.P.M_name]]"), ("[(M, B):[CM:59, CM.f.P.P]]", "[(string, B):[CM:59, CM.f.P.P.M_name]]"), ("[(M, A):[M:36]]", "[(string, B):[string:304 Stainless Steel]]"), ("[(M, B):[CM:15, CM.f.P.P]]", "[(string, B):[CM:15, CM.f.P.P.M_name]]"), ("[(M, B):[M:18]]", "[(string, B):[string:Carbon Steel]]"), ("[(M, B):[CM:11, CM.f.P.P]]", "[(string, B):[CM:11, CM.f.P.P.M_name]]"), ("[(M, B):[M:37]]", "[(string, B):[string:Others]]"), ("[(M, B):[M:10]]", "[(string, B):[string:A-6 Tool Steel]]"), ("[(M, B):[M:2]]", "[(string, B):[string:A-2 Tool Steel]]"), ("[(M, B):[M:14]]", "[(string, B):[string:Titanium Alloy Ti 6AI-4V]]"), ("[(M, B):[M:6]]", "[(string, B):[string:Titanium]]"), ("[(M, B):[CM:16, CM.f.P]]", "[(string, B):[CM:16, CM.f.P.M_name]]"), ("[(M, A):[M:7]]", "[(string, B):[string:Tool Steel]]"), ("[(M, B):[CM:51, CM.f.P.P]]", "[(string, B):[CM:51, CM.f.P.P.M_name]]"), ("[(M, B):[CM:24, CM.f.P]]", "[(string, B):[CM:24, CM.f.P.M_name]]"), ("[(M, B):[CM:55, CM.f.P]]", "[(string, B):[CM:55, CM.f.P.M_name]]"), ("[(M, B):[CM:68, CM.f.P]]", "[(string, B):[CM:68, CM.f.P.M_name]]"), ("[(M, B):[M:29]]", "[(string, B):[string:4130 Tool Steel]]"), ("[(M, B):[CM:61, CM.f.P]]", "[(string, B):[CM:61, CM.f.P.M_name]]"), ("[(M, B):[M:25]]", "[(string, B):[string:Alloy Steel]]"), ("[(M, B):[CM:46, CM.f.P]]", "[(string, B):[CM:46, CM.f.P.M_name]]"), ("[(M, B):[M:21]]", "[(string, B):[string:Non-Ferrous]]"), ("[(M, C):[Material:Polyester]]", "[(string, C):[string:Polyester]]"), ("[(M, B):[CM:8, CM.f.P]]", "[(string, B):[CM:8, CM.f.P.M_name]]"), ("[(M, C):[Material:ThermoPlastic]]", "[(string, C):[string:ThermoPlastic]]"), ("[(M, B):[M:40]]", "[(string, B):[string:Fully Hardened Tool Steel]]"), ("[(M, B):[CM:1, CM.f.P]]", "[(string, B):[CM:1, CM.f.P.M_name]]"), ("[(M, B):[M:9]]", "[(string, B):[string:Cobalt]]"), ("[(M, B):[CM:26, CM.f.P]]", "[(string, B):[CM:26, CM.f.P.M_name]]"), ("[(M, B):[M:11, M.P.P]]", "[(string, B):[M:11, M.P.P.M_name]]"), ("[(M, B):[CM:14, CM.f.P]]", "[(string, B):[CM:14, CM.f.P.M_name]]"), ("[(M, B):[CM:8, CM.f.P.P]]", "[(string, B):[CM:8, CM.f.P.P.M_name]]"), ("[(M, B):[M:11, M.P]]", "[(string, B):[M:11, M.P.M_name]]"), ("[(M, B):[M:13]]", "[(string, B):[string:Stainless Steel 300 Series]]"), ("[(M, C):[Material:GlassCeramics]]", "[(string, C):[string:GlassCeramics]]"), ("[(M, C):[Material:NonCrystalline]]", "[(string, C):[string:NonCrystalline]]"), ("[(M, B):[M:1]]", "[(string, B):[string:4140 Alloy Steels]]"), ("[(M, B):[CM:86, CM.f.P.P]]", "[(string, B):[CM:86, CM.f.P.P.M_name]]"), ("[(M, B):[M:17]]", "[(string, B):[string:Titanium Alloy CP4]]"), ("[(M, B):[CM:85, CM.f.P.P]]", "[(string, B):[CM:85, CM.f.P.P.M_name]]"), ("[(M, B):[CM:60, CM.f.P.P]]", "[(string, B):[CM:60, CM.f.P.P.M_name]]"), ("[(M, B):[CM:61, CM.f.P.P]]", "[(string, B):[CM:61, CM.f.P.P.M_name]]"), ("[(M, B):[CM:11, CM.f.P]]", "[(string, B):[CM:11, CM.f.P.M_name]]"), ("[(M, B):[M:37, M.P]]", "[(string, B):[M:37, M.P.M_name]]"), ("[(M, B):[CM:49, CM.f.P.P]]", "[(string, B):[CM:49, CM.f.P.P.M_name]]"), ("[(M, A):[M:34, M.P.P]]", "[(string, B):[CM:62, CM.f.P.P.M_name]]"), ("[(M, B):[CM:85, CM.f.P]]", "[(string, B):[CM:85, CM.f.P.M_name]]"), ("[(M, B):[CM:47, CM.f.P]]", "[(string, B):[CM:47, CM.f.P.M_name]]"), ("[(M, B):[CM:88, CM.f.P.P]]", "[(string, B):[CM:88, CM.f.P.P.M_name]]"), ("[(M, B):[CM:44, CM.f.P.P]]", "[(string, B):[CM:44, CM.f.P.P.M_name]]"), ("[(M, B):[M:28]]", "[(string, B):[string:D2 Tool Steel]]"), ("[(M, C):[Material:SuperAlloy]]", "[(string, C):[string:SuperAlloy]]"), ("[(M, B):[CM:24, CM.f.P.P]]", "[(string, B):[CM:24, CM.f.P.P.M_name]]"), ("[(M, B):[M:24]]", "[(string, B):[string:Extrusions]]"), ("[(M, B):[CM:57, CM.f.P]]", "[(string, B):[CM:57, CM.f.P.M_name]]"), ("[(M, B):[CM:46, CM.f.P.P]]", "[(string, B):[CM:46, CM.f.P.P.M_name]]"), ("[(M, B):[CM:25, CM.f.P.P]]", "[(string, B):[CM:25, CM.f.P.P.M_name]]"), ("[(M, B):[CM:68, CM.f.P.P]]", "[(string, B):[CM:68, CM.f.P.P.M_name]]"), ("[(M, B):[CM:47, CM.f.P.P]]", "[(string, B):[CM:47, CM.f.P.P.M_name]]"), ("[(M, B):[CM:44, CM.f.P]]", "[(string, B):[CM:44, CM.f.P.M_name]]"), ("[(M, A):[M:36, M.P]]", "[(string, B):[CM:65, CM.f.P.M_name]]"), ("[(M, B):[CM:48, CM.f.P.P]]", "[(string, B):[CM:48, CM.f.P.P.M_name]]"), ("[(M, B):[CM:27, CM.f.P.P]]", "[(string, B):[CM:27, CM.f.P.P.M_name]]"), ("[(M, B):[CM:26, CM.f.P.P]]", "[(string, B):[CM:26, CM.f.P.P.M_name]]")}
	 ,C_name -> {("[(C, B):[C:6]]", "[(string, B):[string:Electrical Discharge Machining Services]]"), ("[(C, B):[C:5]]", "[(string, B):[string:EDM]]"), ("[(C, B):[C:8]]", "[(string, B):[string:Custom  Molds for Plastic, Rubber, and Die Cast parts]]"), ("[(C, B):[C:7]]", "[(string, B):[string:Wire Electrical Discharge Machining]]"), ("[(C, B):[C:2]]", "[(string, B):[string:CNC & Conventional Machining (turning & milling)]]"), ("[(C, B):[C:10]]", "[(string, B):[string:Plastic Mold Making Services]]"), ("[(C, B):[C:1]]", "[(string, B):[string:CNC Machining]]"), ("[(C, B):[C:11]]", "[(string, B):[string:Mold Design and Build]]"), ("[(C, B):[C:4]]", "[(string, B):[string:Wire EDM]]"), ("[(C, B):[C:3]]", "[(string, B):[string:Sinker EDM]]"), ("[(C, B):[C:9]]", "[(string, B):[string:Prototype and Production Mold Design & Manufacturing]]")}
	 ,P -> {("[(M, B):[CM:88, CM.f.P]]", "[(M, B):[CM:88, CM.f.P.P]]"), ("[(M, B):[M:37, M.P.P]]", "[(M, B):[M:37, M.P.P]]"), ("[(M, C):[Material:Iconel]]", "[(M, C):[Material:SuperAlloy]]"), ("[(M, C):[Material:Hermoset]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:27, CM.f.P]]", "[(M, B):[CM:27, CM.f.P.P]]"), ("[(M, B):[M:12]]", "[(M, B):[CM:11, CM.f.P]]"), ("[(M, B):[M:4]]", "[(M, B):[CM:47, CM.f.P]]"), ("[(M, B):[CM:13, CM.f.P]]", "[(M, B):[CM:13, CM.f.P.P]]"), ("[(M, B):[CM:51, CM.f.P]]", "[(M, B):[CM:51, CM.f.P.P]]"), ("[(M, C):[Material:Stellite]]", "[(M, C):[Material:SuperAlloy]]"), ("[(M, B):[M:39]]", "[(M, B):[CM:85, CM.f.P]]"), ("[(M, B):[CM:58, CM.f.P]]", "[(M, B):[CM:58, CM.f.P.P]]"), ("[(M, B):[M:16]]", "[(M, B):[CM:15, CM.f.P]]"), ("[(M, B):[M:8]]", "[(M, B):[CM:48, CM.f.P]]"), ("[(M, B):[CM:1, CM.f.P.P]]", "[(M, B):[CM:1, CM.f.P.P]]"), ("[(M, C):[Material:Glass]]", "[(M, C):[Material:NonCrystalline]]"), ("[(M, B):[CM:59, CM.f.P]]", "[(M, B):[CM:59, CM.f.P.P]]"), ("[(M, C):[Material:Hastelloy]]", "[(M, C):[Material:SuperAlloy]]"), ("[(M, B):[M:27]]", "[(M, B):[CM:57, CM.f.P]]"), ("[(M, B):[M:23]]", "[(M, B):[CM:26, CM.f.P]]"), ("[(M, B):[CM:49, CM.f.P]]", "[(M, B):[CM:49, CM.f.P.P]]"), ("[(M, B):[CM:60, CM.f.P]]", "[(M, B):[CM:60, CM.f.P.P]]"), ("[(M, C):[Material:NonFerrous]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, C):[Material:Crystalline]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, C):[Material:CastIron]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, C):[Material:DieSteel]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:86, CM.f.P]]", "[(M, B):[CM:86, CM.f.P.P]]"), ("[(M, C):[Material:Composite]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[M:3]]", "[(M, B):[CM:58, CM.f.P]]"), ("[(M, B):[M:38]]", "[(M, B):[CM:68, CM.f.P]]"), ("[(M, B):[M:11]]", "[(M, B):[M:11, M.P]]"), ("[(M, C):[Material:Nylon]]", "[(M, C):[Material:ThermoPlastic]]"), ("[(M, B):[M:15]]", "[(M, B):[CM:14, CM.f.P]]"), ("[(M, B):[CM:48, CM.f.P]]", "[(M, B):[CM:48, CM.f.P.P]]"), ("[(M, B):[M:30]]", "[(M, B):[CM:61, CM.f.P]]"), ("[(M, B):[CM:56, CM.f.P]]", "[(M, B):[CM:56, CM.f.P.P]]"), ("[(M, B):[CM:56, CM.f.P.P]]", "[(M, B):[CM:56, CM.f.P.P]]"), ("[(M, C):[Material:PVC]]", "[(M, C):[Material:ThermoPlastic]]"), ("[(M, B):[CM:55, CM.f.P.P]]", "[(M, B):[CM:55, CM.f.P.P]]"), ("[(M, B):[CM:12, CM.f.P.P]]", "[(M, B):[CM:12, CM.f.P.P]]"), ("[(M, B):[M:26]]", "[(M, B):[CM:56, CM.f.P]]"), ("[(M, C):[Material:Elastomer]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[M:22]]", "[(M, B):[CM:25, CM.f.P]]"), ("[(M, B):[CM:12, CM.f.P]]", "[(M, B):[CM:12, CM.f.P.P]]"), ("[(M, B):[CM:13, CM.f.P.P]]", "[(M, B):[CM:13, CM.f.P.P]]"), ("[(M, B):[CM:15, CM.f.P]]", "[(M, B):[CM:15, CM.f.P.P]]"), ("[(M, B):[CM:25, CM.f.P]]", "[(M, B):[CM:25, CM.f.P.P]]"), ("[(M, B):[CM:14, CM.f.P.P]]", "[(M, B):[CM:14, CM.f.P.P]]"), ("[(M, B):[CM:57, CM.f.P.P]]", "[(M, B):[CM:57, CM.f.P.P]]"), ("[(M, B):[M:41]]", "[(M, B):[CM:88, CM.f.P]]"), ("[(M, B):[CM:16, CM.f.P.P]]", "[(M, B):[CM:16, CM.f.P.P]]"), ("[(M, B):[CM:58, CM.f.P.P]]", "[(M, B):[CM:58, CM.f.P.P]]"), ("[(M, B):[CM:59, CM.f.P.P]]", "[(M, B):[CM:59, CM.f.P.P]]"), ("[(M, A):[M:36]]", "[(M, A):[M:36, M.P]]"), ("[(M, B):[CM:15, CM.f.P.P]]", "[(M, B):[CM:15, CM.f.P.P]]"), ("[(M, B):[M:18]]", "[(M, B):[CM:49, CM.f.P]]"), ("[(M, B):[CM:11, CM.f.P.P]]", "[(M, B):[CM:11, CM.f.P.P]]"), ("[(M, B):[M:37]]", "[(M, B):[M:37, M.P]]"), ("[(M, B):[M:10]]", "[(M, B):[CM:8, CM.f.P]]"), ("[(M, B):[M:2]]", "[(M, B):[CM:55, CM.f.P]]"), ("[(M, B):[M:14]]", "[(M, B):[CM:13, CM.f.P]]"), ("[(M, B):[M:6]]", "[(M, B):[CM:51, CM.f.P]]"), ("[(M, B):[CM:16, CM.f.P]]", "[(M, B):[CM:16, CM.f.P.P]]"), ("[(M, A):[M:7]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:51, CM.f.P.P]]", "[(M, B):[CM:51, CM.f.P.P]]"), ("[(M, B):[CM:24, CM.f.P]]", "[(M, B):[CM:24, CM.f.P.P]]"), ("[(M, B):[CM:55, CM.f.P]]", "[(M, B):[CM:55, CM.f.P.P]]"), ("[(M, B):[CM:68, CM.f.P]]", "[(M, B):[CM:68, CM.f.P.P]]"), ("[(M, B):[M:29]]", "[(M, B):[CM:60, CM.f.P]]"), ("[(M, B):[CM:61, CM.f.P]]", "[(M, B):[CM:61, CM.f.P.P]]"), ("[(M, B):[M:25]]", "[(M, B):[CM:46, CM.f.P]]"), ("[(M, B):[CM:46, CM.f.P]]", "[(M, B):[CM:46, CM.f.P.P]]"), ("[(M, B):[M:21]]", "[(M, B):[CM:24, CM.f.P]]"), ("[(M, C):[Material:Polyester]]", "[(M, C):[Material:ThermoPlastic]]"), ("[(M, B):[CM:8, CM.f.P]]", "[(M, B):[CM:8, CM.f.P.P]]"), ("[(M, C):[Material:ThermoPlastic]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[M:40]]", "[(M, B):[CM:86, CM.f.P]]"), ("[(M, B):[CM:1, CM.f.P]]", "[(M, B):[CM:1, CM.f.P.P]]"), ("[(M, B):[M:9]]", "[(M, B):[CM:44, CM.f.P]]"), ("[(M, B):[CM:26, CM.f.P]]", "[(M, B):[CM:26, CM.f.P.P]]"), ("[(M, B):[M:11, M.P.P]]", "[(M, B):[M:11, M.P.P]]"), ("[(M, B):[CM:14, CM.f.P]]", "[(M, B):[CM:14, CM.f.P.P]]"), ("[(M, B):[CM:8, CM.f.P.P]]", "[(M, B):[CM:8, CM.f.P.P]]"), ("[(M, B):[M:11, M.P]]", "[(M, B):[M:11, M.P.P]]"), ("[(M, B):[M:13]]", "[(M, B):[CM:12, CM.f.P]]"), ("[(M, C):[Material:GlassCeramics]]", "[(M, C):[Material:NonCrystalline]]"), ("[(M, C):[Material:NonCrystalline]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[M:1]]", "[(M, B):[CM:1, CM.f.P]]"), ("[(M, B):[CM:86, CM.f.P.P]]", "[(M, B):[CM:86, CM.f.P.P]]"), ("[(M, B):[M:17]]", "[(M, B):[CM:16, CM.f.P]]"), ("[(M, B):[CM:85, CM.f.P.P]]", "[(M, B):[CM:85, CM.f.P.P]]"), ("[(M, B):[CM:60, CM.f.P.P]]", "[(M, B):[CM:60, CM.f.P.P]]"), ("[(M, B):[CM:61, CM.f.P.P]]", "[(M, B):[CM:61, CM.f.P.P]]"), ("[(M, B):[CM:11, CM.f.P]]", "[(M, B):[CM:11, CM.f.P.P]]"), ("[(M, B):[M:37, M.P]]", "[(M, B):[M:37, M.P.P]]"), ("[(M, B):[CM:49, CM.f.P.P]]", "[(M, B):[CM:49, CM.f.P.P]]"), ("[(M, A):[M:34, M.P.P]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:85, CM.f.P]]", "[(M, B):[CM:85, CM.f.P.P]]"), ("[(M, B):[CM:47, CM.f.P]]", "[(M, B):[CM:47, CM.f.P.P]]"), ("[(M, B):[CM:88, CM.f.P.P]]", "[(M, B):[CM:88, CM.f.P.P]]"), ("[(M, B):[CM:44, CM.f.P.P]]", "[(M, B):[CM:44, CM.f.P.P]]"), ("[(M, B):[M:28]]", "[(M, B):[CM:59, CM.f.P]]"), ("[(M, C):[Material:SuperAlloy]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:24, CM.f.P.P]]", "[(M, B):[CM:24, CM.f.P.P]]"), ("[(M, B):[M:24]]", "[(M, B):[CM:27, CM.f.P]]"), ("[(M, B):[CM:57, CM.f.P]]", "[(M, B):[CM:57, CM.f.P.P]]"), ("[(M, B):[CM:46, CM.f.P.P]]", "[(M, B):[CM:46, CM.f.P.P]]"), ("[(M, B):[CM:25, CM.f.P.P]]", "[(M, B):[CM:25, CM.f.P.P]]"), ("[(M, B):[CM:68, CM.f.P.P]]", "[(M, B):[CM:68, CM.f.P.P]]"), ("[(M, B):[CM:47, CM.f.P.P]]", "[(M, B):[CM:47, CM.f.P.P]]"), ("[(M, B):[CM:44, CM.f.P]]", "[(M, B):[CM:44, CM.f.P.P]]"), ("[(M, A):[M:36, M.P]]", "[(M, A):[M:34, M.P.P]]"), ("[(M, B):[CM:48, CM.f.P.P]]", "[(M, B):[CM:48, CM.f.P.P]]"), ("[(M, B):[CM:27, CM.f.P.P]]", "[(M, B):[CM:27, CM.f.P.P]]"), ("[(M, B):[CM:26, CM.f.P.P]]", "[(M, B):[CM:26, CM.f.P.P]]")}
	 ,f -> {("[(CM, B):[CM:68]]", "[(M, B):[M:38]]"), ("[(CM, B):[CM:22]]", "[(M, A):[M:34, M.P.P]]"), ("[(CM, B):[CM:45]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:66]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:43]]", "[(M, B):[M:18]]"), ("[(CM, B):[CM:24]]", "[(M, B):[M:21]]"), ("[(CM, B):[CM:64]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:41]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:62]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:20]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:60]]", "[(M, B):[M:29]]"), ("[(CM, B):[CM:19]]", "[(M, B):[M:6]]"), ("[(CM, B):[CM:38]]", "[(M, B):[M:24]]"), ("[(CM, B):[CM:15]]", "[(M, B):[M:16]]"), ("[(CM, B):[CM:59]]", "[(M, B):[M:28]]"), ("[(CM, B):[CM:36]]", "[(M, B):[M:22]]"), ("[(CM, B):[CM:17]]", "[(M, B):[M:18]]"), ("[(CM, B):[CM:57]]", "[(M, B):[M:27]]"), ("[(CM, B):[CM:34]]", "[(M, A):[M:34, M.P.P]]"), ("[(CM, B):[CM:11]]", "[(M, B):[M:12]]"), ("[(CM, B):[CM:78]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:55]]", "[(M, B):[M:2]]"), ("[(CM, B):[CM:32]]", "[(M, B):[M:18]]"), ("[(CM, B):[CM:13]]", "[(M, B):[M:14]]"), ("[(CM, B):[CM:76]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:30]]", "[(M, B):[M:6]]"), ("[(CM, B):[CM:53]]", "[(M, B):[M:6]]"), ("[(CM, B):[CM:74]]", "[(M, B):[M:29]]"), ("[(CM, B):[CM:72]]", "[(M, B):[M:3]]"), ("[(CM, B):[CM:51]]", "[(M, B):[M:6]]"), ("[(CM, B):[CM:70]]", "[(M, B):[M:26]]"), ("[(CM, B):[CM:3]]", "[(M, B):[M:3]]"), ("[(CM, B):[CM:80]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:1]]", "[(M, B):[M:1]]"), ("[(CM, B):[CM:82]]", "[(M, B):[M:38]]"), ("[(CM, B):[CM:7]]", "[(M, A):[M:7]]"), ("[(CM, B):[CM:29]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:5]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:86]]", "[(M, B):[M:40]]"), ("[(CM, B):[CM:88]]", "[(M, B):[M:41]]"), ("[(CM, B):[CM:25]]", "[(M, B):[M:22]]"), ("[(CM, B):[CM:9]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:69]]", "[(M, B):[M:2]]"), ("[(CM, B):[CM:48]]", "[(M, B):[M:8]]"), ("[(CM, B):[CM:27]]", "[(M, B):[M:24]]"), ("[(CM, B):[CM:67]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:21]]", "[(M, B):[M:8]]"), ("[(CM, B):[CM:46]]", "[(M, B):[M:25]]"), ("[(CM, B):[CM:65]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:44]]", "[(M, B):[M:9]]"), ("[(CM, B):[CM:23]]", "[(M, A):[M:34, M.P.P]]"), ("[(CM, B):[CM:63]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:42]]", "[(M, B):[M:8]]"), ("[(CM, B):[CM:61]]", "[(M, B):[M:30]]"), ("[(CM, B):[CM:40]]", "[(M, B):[M:25]]"), ("[(CM, B):[CM:18]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:14]]", "[(M, B):[M:15]]"), ("[(CM, B):[CM:58]]", "[(M, B):[M:3]]"), ("[(CM, B):[CM:37]]", "[(M, B):[M:23]]"), ("[(CM, B):[CM:16]]", "[(M, B):[M:17]]"), ("[(CM, B):[CM:79]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:56]]", "[(M, B):[M:26]]"), ("[(CM, B):[CM:35]]", "[(M, B):[M:21]]"), ("[(CM, B):[CM:10]]", "[(M, B):[M:8]]"), ("[(CM, B):[CM:77]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:33]]", "[(M, A):[M:34, M.P.P]]"), ("[(CM, B):[CM:12]]", "[(M, B):[M:13]]"), ("[(CM, B):[CM:52]]", "[(M, B):[M:9]]"), ("[(CM, B):[CM:75]]", "[(M, B):[M:30]]"), ("[(CM, B):[CM:31]]", "[(M, B):[M:8]]"), ("[(CM, B):[CM:73]]", "[(M, B):[M:28]]"), ("[(CM, B):[CM:50]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:71]]", "[(M, B):[M:27]]"), ("[(CM, B):[CM:4]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:2]]", "[(M, B):[M:2]]"), ("[(CM, B):[CM:81]]", "[(M, A):[M:36]]"), ("[(CM, B):[CM:8]]", "[(M, B):[M:10]]"), ("[(CM, B):[CM:83]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:6]]", "[(M, B):[M:6]]"), ("[(CM, B):[CM:85]]", "[(M, B):[M:39]]"), ("[(CM, B):[CM:87]]", "[(M, B):[M:3]]"), ("[(CM, B):[CM:26]]", "[(M, B):[M:23]]"), ("[(CM, B):[CM:49]]", "[(M, B):[M:18]]"), ("[(CM, B):[CM:47]]", "[(M, B):[M:4]]"), ("[(CM, B):[CM:28]]", "[(M, B):[M:4]]")}
;} : D -> Set

/////////////////////////////////////////////////
/*Finally, we want to ask our query
 
  Identify services having the following manufacturing capabilities: 
    has sinker EDM capability, 
    can machine parts 15 cm and smaller, 
    and can machine pre- hardened stainless steel.

  Morally, we should ask this query on A.  But, for some reason,
  David and I wrote this query against D.  
*/
category Vars = {
	objects CM, C, M1, M2, M, string;
	arrows g : CM -> C, f : CM -> M2, i1 : M -> M1, i2 : M -> M2, P : M1 -> M2, Px : M2 -> M2, M_name : M -> string, C_name : C -> string;
	equations M2.Px.Px.Px = M2.Px.Px; 
}

category And = {
	objects CMP, CM, C, M1, M, M2, Mc, string;
	arrows P : M1 -> M2, p1 : CMP -> CM, g : CM -> C, p2 : CMP -> M1, i1 : M -> M1, i2 : M -> M2, Px : M2 -> M2, f : CM -> M2, M_name : M -> string, C_name : C -> string;
	equations M2.Px.Px.Px = M2.Px.Px, CMP.p1.f = CMP.p2.P; 
}

category Sep = {
	objects CMP, CM, C, M2, M1, M, string;
	arrows g : CM ->C, f : CM->M2, i2 : M -> M2, i1: M -> M1, p2 : CMP -> M1, Px : M2->M2, pg : CMP -> C, M_name : M -> string, C_name : C -> string;
	equations M2.Px.Px.Px = M2.Px.Px;
}

functor F3 = {
	objects CMP -> CMP, CM -> CM, C -> C, M2 -> M2, M1 -> M1, M -> M, string -> string;
	arrows g -> CM.g, f -> CM.f, i2 -> M.i2, i1 -> M.i1, p2 -> CMP.p2, Px -> M2.Px, pg -> CMP.p1.g, M_name -> M.M_name, C_name -> C.C_name;
} : Sep -> And

functor F2 = {
	objects CM -> CM, C -> C, M2 -> M2, M -> M, M1 -> M1, string -> string;
	arrows g -> CM.g, f -> CM.f, i1 -> M.i1, i2 -> M.i2, Px -> M2.Px, P -> M1.P, M_name -> M.M_name, C_name -> C.C_name;
} : Vars -> And 

functor F1 = {
	objects CM -> CM, C -> C,  M -> M, M1 -> M, M2 -> M, string -> string;
	arrows g -> CM.g, f -> CM.f, i1 -> M, i2 -> M, P -> M, Px -> M.P, M_name -> M.M_name, C_name -> C.C_name;
} : Vars -> D 

functor F4 = {
	objects CMP -> CM, CM -> CM, C -> C, M2 -> M, M1 -> M, M -> M, string -> string;
	arrows i1 -> M, i2 -> M, f -> CM.f, g -> CM.g, p2 -> CM.f, Px -> M.P, pg -> CM.g, M_name -> M.M_name, C_name -> C.C_name;
} : Sep -> D

//the answer to our query is given by 'answer'.  Unfortunately, we are doing 
//a pi - an uber join - against tables with hundreds of rows, and FQL++ can't handle it.
//functor I1 = apply delta F1 on object preanswer
//functor I2 = apply pi F2 on object I1
//functor I3 = apply delta F3 on object I2
//functor answer = apply sigma F4 on object I3

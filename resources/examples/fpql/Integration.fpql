//Example via Peter Gates
/* **********************************************************
IMPORTANT IMPORTANT IMPORTANT : Requires disabling type checking to run
/********************************************************* */
//Types:
dom:type
xPeter xPaul xM xF xBloodPressure xBodyWeight xHeartRate xPete xJane  : dom

//Input schemas:

OverlapSch = schema {
 nodes
	O,P,T;
 edges
	f:O->P,g:O->T;
 equations; 
}

Sch1 = schema {
	nodes Observation, Person, Gender, ObsType;
	edges f:Observation->Person, h:Person->Gender, g:Observation->ObsType,
	      Person_att:Person->dom, Gender_att:Gender->dom, ObsType_att:ObsType->dom;
	equations;
}

Sch2 = schema {
	nodes Observation, Patient, Method, Type;
	edges f:Observation->Patient, g1:Observation->Method, g2:Method->Type,
	      Patient_att:Patient->dom, Type_att:Type->dom;
	equations;
}

// Input instances:

OvInst=instance {
	  variables Peter:P, BloodPressure:T, BodyWeight:T;
	  equations;
} 	: OverlapSch

Inst1=instance {
	    variables
	    1:Observation, 2:Observation, 3:Observation,
	    Peter:Person, Paul:Person,
	    M:Gender, F:Gender,
	    BloodPressure: ObsType, BodyWeight:ObsType, HeartRate:ObsType; 
	equations
		Peter.Person_att=xPeter, Paul.Person_att=xPaul,
		M.Gender_att=xM, F.Gender_att=xF,
		BloodPressure.ObsType_att=xBloodPressure, 
		BodyWeight.ObsType_att=xBodyWeight,
		HeartRate.ObsType_att=xHeartRate,
		1.f = Peter, 2.f = Peter, 3.f = Paul,
		Peter.h = M, Paul.h = M,
		1.g=BloodPressure, 2.g=BodyWeight, 3.g=HeartRate;
}	: Sch1

Inst2 = instance {
	    variables
	    	    1:Observation, 2:Observation, 3:Observation, 4:Observation,
		    Pete:Patient, Jane:Patient,
		    1:Method, 2:Method, 3:Method, 4:Method,
		    BP:Type, Wt:Type;
	    equations
	     Pete.Patient_att=xPete, Jane.Patient_att=xJane,
	     BP.Type_att=xBloodPressure, Wt.Type_att=xBodyWeight,
	     1.f=Pete, 2.f=Pete, 3.f=Jane, 4.f=Jane,
	     1.g1=1, 2.g1=2, 3.g1=3, 4.g1=1,
	     1.g2=BP, 2.g2=BP, 3.g2=Wt, 4.g2=Wt;
} : Sch2

//Input mappings:

F1 = mapping {
	nodes O->Observation,P->Person, T->ObsType;
	edges f->f, g->g;
}	: OverlapSch -> Sch1

F2 = mapping {
	nodes O->Observation,P->Patient,T->Type;
	edges f->f, g->g1.g2;
}	: OverlapSch -> Sch2

//Input homomorphisms:

a1 = homomorphism {
	variables Peter->Peter, BloodPressure->BloodPressure, BodyWeight->BodyWeight;
}: sigma F1 OvInst -> Inst1

a2 = homomorphism {
	variables Peter->Pete, BloodPressure->BP, BodyWeight->Wt;
} : sigma F2 OvInst -> Inst2


//Get the aliases in the right places.

Sch1prime = schema {
	nodes Observation, Person, Gender, ObsType, PAlias;
	edges f:Observation->Person, h:Person->Gender, g:Observation->ObsType,
	      Gender_att:Gender->dom, ObsType_att:ObsType->dom,
	      att:PAlias->dom, p:PAlias->Person;
	equations;
}

U1 = mapping {
	nodes Observation->Observation, Person->Person, Gender->Gender, ObsType->ObsType, PAlias->Person;
	edges f -> f, g -> g, h -> h, p -> Person, Gender_att -> Gender_att,
	      ObsType_att -> ObsType_att, att -> Person_att;
}	: Sch1prime -> Sch1

Sch2prime = schema {
	nodes Observation, Patient, Method, Type, PAlias;
	edges f:Observation->Patient, g1:Observation->Method, g2:Method->Type,
	      Type_att:Type->dom,
	      att:PAlias->dom, p:PAlias->Patient;
	equations;
}

U2 = mapping {
	nodes Observation -> Observation, Patient -> Patient, Method -> Method, Type->Type, PAlias -> Patient;
	edges f->f, g1->g1, g2->g2,
	      Type_att->Type_att,
	      att->Patient_att, p -> Patient;
}	: Sch2prime -> Sch2

Inst1prime = delta U1 Inst1

Inst2prime = delta U2 Inst2

F1prime = mapping {
	nodes O->Observation, P->Person, T->ObsType;
	edges f->f, g->g;
} : OverlapSch -> Sch1prime

F2prime = mapping {
	nodes O->Observation, P->Patient, T->Type;
	edges f->f, g->g1.g2;
}	: OverlapSch -> Sch2prime

//Form integrator

Integrator = schema {
	nodes O,P,PAlias,G,T,M;
	edges 
		f:O->P, g1:O->M, g2:M->T, h:P->G, 
		G_att:G->dom,
		T_att:T->dom,
		p:PAlias->P,
		att:PAlias->dom;
	equations;
}

G1 = mapping {
	nodes Observation->O, Person->P, PAlias->PAlias, Gender->G, ObsType->T;
	edges f->f, g->g1.g2, h->h, p->p, att->att, 
	ObsType_att->T_att, Gender_att->G_att;
} : Sch1prime -> Integrator

G2 = mapping {
	nodes Observation->O, Patient->P, PAlias->PAlias, Method->M, Type->T;
	edges f->f, g1->g1, g2->g2, p->p, att->PAlias.att,
	Type_att->T_att;
} : Sch2prime -> Integrator

Gover = mapping {
	nodes O->O, P->P,T->T;
	edges f->O.f, g->O.g1.g2;
} 
	: OverlapSch -> Integrator

//sigma F1prime OvInst => delta U1 Inst1  (on Sch1prime)
a1prime = (return sigma delta U1 sigma F1prime OvInst; delta U1 a1)

//sigma F2prime OvInst => delta U2 Inst2 (on Sch2prime)
a2prime = (return sigma delta U2 sigma F2prime OvInst; delta U2 a2)

//push along G1 and G2 to integrator schema
xxx1 = sigma G1 a1prime
yyy1 = sigma G2 a2prime

//pushout
answer = pushout xxx1 yyy1

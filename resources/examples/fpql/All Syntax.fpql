//Don't forget to enable 'adom tables' in the options menu to display instances on infinite schemas
string : type
bill : string
george harry : string
reverse : string -> string
eq1 : reverse.reverse = string

S = schema {
	nodes N;
	edges f : N -> N, att : N -> string;
	equations f.f = f;
}
SS = schema {
nodes N;
edges f : N -> string;
equations "!_N".bill = f;
}

I = instance {
	variables v:N, u:string;
	equations v.att = bill.reverse;
} : S

II = instance {
	variables v:N, vx:N, vy yz:N;
	equations;
} : S

//asserts that an instance is saturated
J = INSTANCE {
	variables;
	equations;
} : S

F = mapping {
	nodes N -> N;
	edges f -> f.f, att -> att;
} : S -> S
F1 = id S
F2 = (F1 ; F1)

h = homomorphism {
	variables v -> v, u -> v.att;
} : I -> I
h1 = id I
h2 = (h1 ; h1)
h3 = pushout h h

//conjunctive queries (does not relationalize)
q1 = flower {
	select n1.att as col1, n2.att as col2;
	from N as n1, N as n2;
	where n1.f.att = n2.att;
} I //(q1:var) = flower ... will bind var to the result schema

//allows propositional logic (relationalizes)
q2 = FLOWER {
	select n1.att as col1, n2.att as col2;
	from N as n1, N as n2;
	where ((true and n1.f.att = n2.att) or false);
} I

uber = polynomial {
	 q = {for n:N; where n.att=n.att; attributes att=n.att; edges f = {n=n.f} : q;} : N
} : S -> S
uber2 = apply uber I
uber3 = apply uber h
uber4 = coapply uber uber2

w1 = pi F I
w2 = sigma F I
w3 = delta F I
w4 = relationalize I
u1 = pi F h
u2 = sigma F h
u3 = delta F h
u4 = relationalize h

x1 = return sigma delta F I
x2 = coreturn sigma delta F I
x3 = return delta pi F I
x4 = coreturn delta pi F I

I0 = (I * I)
I1 = fst I I
I2 = snd I I
I3 = pair I1 I2
I4 = (I + I)
I5 = inl I I
I6 = inr I I
I7 = case I5 I6
I8 = void S
I9 = ff I
I10 = unit S
I11= tt I

//illustrates warning for non functors
Sch1 = schema {
	nodes n;
	edges f:n-> n;
	equations f.f = n;
}

Sch2 = schema {
	nodes n;
	edges f:n-> n;
	equations;
}

/* Here we show that all three data migration functors (delta, pi, SIGMA) 
 * can be used to compute composition of functions.
 * It's good to TURN OBSERVABLES ON.
  */

schema TwoMaps = {
	nodes A,B,C;
	attributes attA:A->int,attC:C->int;
	arrows sq:A->B,inc:B->C;
	equations;
}

instance I = {
	nodes 
		A->{a,b,c,d},
		B->{m,n,o,p,q},
		C->{v,w,x,y,z};
	attributes 
		attA->{(a,"-1"),(b,0),(c,1),(d,2)},
		attC->{(v,1),(w,2),(x,3),(y,4),(z,5)};
	arrows
		sq->{(a,n),(b,m),(c,n),(d,q)},//square map \x.x^2
		inc->{(m,v),(n,w),(o,x),(p,y),(q,z)}//inc map \x.x+1
	;
} : TwoMaps

schema OneMap = {
	nodes A,C;
	attributes attA:A->int,attC:C->int;
	arrows sqinc:A->C;
	equations;
}

mapping ForDelta = {
	nodes A->A,C->C;
	attributes attA->attA,attC->attC;
	arrows sqinc->A.sq.inc;
} : OneMap -> TwoMaps

instance ComposeUsingDelta = delta ForDelta I

mapping ForSIGMA = {
	nodes A->A,B->C, C->C;
	attributes attA->attA,attC->attC;
	arrows sq->A.sqinc,inc->C;
} : TwoMaps -> OneMap

instance ComposeUsingSigma = SIGMA ForSIGMA I

mapping ForPi = {
	nodes A->A,B->A, C->C;
	attributes attA->attA,attC->attC;
	arrows sq->A,inc->A.sqinc;
} : TwoMaps -> OneMap

instance ComposeUsingPi = pi ForPi I

//////////////////////////////////

/* This part of the file starts with a function f:x->y 
 * and factors it as a surjection, x->im, followed by an injection im->y.
 * This is done using data migration queries delta, pi, SIGMA.
 * The function f is encoded as an A-instance J: A->Set. 
 */

schema A = {
	nodes x,y;
	attributes;
	arrows f:x->y;
	equations;
}

schema B = {
	nodes a,b,c,d;
	attributes;
	arrows f:a->b,g:a->c,h:b->d,i:c->d;
	equations;//?
}

schema C = {
	nodes a,b,c,d,e;
	attributes;
	arrows f:a->b,g:a->c,h:b->d,i:c->d, ff:e->b,gg:e->c;
	equations e.ff.h=e.gg.i;
}

schema D = {
	nodes v,w,x,y;
	attributes;
	arrows f:v->w,ff:v->w,g:w->x,h:x->y;
	equations v.f.g=v.ff.g;
}

schema E = {
	nodes x,im,y;
	attributes;
	arrows f:x->im, g:im->y;
	equations;
}

mapping F = {
	nodes a->x,b->x,c->x,d->y;
	attributes;
	arrows f->x,g->x,h->x.f,i->x.f;
} : B -> A

mapping G = {
	nodes a->a,b->b,c->c,d->d;
	attributes ;
	arrows f->a.f,g->a.g,h->b.h,i->c.i;
} : B -> C

mapping H = {
	nodes e->v,a->w,b->w,c->w,d->y;
	attributes;
	arrows f->w,g->w,h->w.g.h,i->w.g.h,ff->v.f,gg->v.ff;
} : C -> D

mapping Ix = {
	nodes x->w,im->x,y->y;
	attributes;
	arrows f->w.g, g->x.h;
} : E -> D


instance J = {
	nodes x->{1,2,3,4,5,6},y->{1,2,3,4};
	attributes;
	arrows f->{(1,1),(2,1),(3,1),(4,2),(5,2),(6,3)};
} :  A

instance J2=delta F J

instance J3=pi G J2

instance J4=SIGMA H J3

instance ImageFactorization=delta Ix J4
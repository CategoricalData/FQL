//requires parallel or hybrid left-kan
schema S = { nodes s ; attributes satt : s -> string; arrows; equations; }
schema T = { nodes t1,t2 ; attributes t1att : t1 -> string; arrows; equations; }
schema B = { nodes b1,b2; attributes b1att : b1 -> string,b2att : b2 -> string; arrows; equations; }
schema A = { nodes a1,a2,a3,a4; attributes a1att : a1 -> string,a2att : a2 -> string; arrows; equations; }

mapping sm = { nodes b1 -> s, b2 -> s; attributes b1att -> satt,b2att -> satt; arrows; } : B -> S
mapping fm = { nodes b1 -> a1, b2 -> a2 ; attributes b1att -> a1att,b2att -> a2att; arrows; } : B -> A 
mapping tm = { nodes a1 -> t1, a2 -> t1, a3 -> t2,a4->t2 ; attributes a1att -> t1att,a2att->t1att; arrows; } : A -> T 

query q1 = delta sm pi fm sigma tm

instance I = {
	nodes s->{1,2,3};
	attributes satt->{(1,one),(2,two),(3,three)};
	arrows;
	} : S

instance q1I  =eval q1 I

schema D = { nodes d1,d2,d3 ;  attributes d1att : d1 -> string; arrows; equations; }
schema C = { nodes c1,c2 ;  attributes c1att : c1 -> string; arrows; equations; }
schema U = { nodes u1,u2 ;  attributes u1att : u1 -> string; arrows; equations;}

mapping um = { nodes d1 -> t1, d2 -> t1 , d3->t2; attributes d1att -> t1att; arrows;} : D -> T 

mapping gm = { nodes d1 -> c1, d2 -> c2,d3->c2 ; attributes d1att -> c1att; arrows;} : D -> C

mapping vm = { nodes c1 -> u1,c2->u2 ;  attributes c1att -> u1att; arrows; } : C -> U

query q2 = delta um pi gm sigma vm
query q  = (q1 then q2)

/*
 * The following two queries should be equal when applied to I. 
 * The first q2q1I is manual composition of q1 and q2.
 * The second qI is formulaic composition.
 */
 
instance q2q1I=eval q2 q1I
instance qI= eval q I
Type = theory {
	sorts 
		String;
	symbols
		gecko, frog, human, cow, horse, dolphin, fish : String;
	equations;
}

C = SCHEMA {
	entities 
		Amphibian,
		LandAnimal,
		WaterAnimal;
	edges
		IsAL: Amphibian -> LandAnimal,
		IsAW: Amphibian -> WaterAnimal;
	attributes
		attA: Amphibian -> String, 
		attL: LandAnimal -> String, 
		attW: WaterAnimal -> String;
	pathEqualities;
	obsEqualities;
} : Type

I = INSTANCE {
	generators 
		a1, a2 : Amphibian,
		l1, l2, l3, l4, l5 : LandAnimal,
		w1, w2, w3, w4 : WaterAnimal;
	equations
		 attA(a1) = gecko,  attA(a2) = frog,
		 attL(l1) = gecko,  attL(l2) = frog, 
		 attL(l3) = human,  attL(l4) = cow, 
		 attL(l5) = horse,  attW(w1) = fish, 
		 attW(w2) = gecko,  attW(w3) = frog, 
		 attW(w4) = dolphin,  IsAL(a1) = l1, 
		 IsAL(a2) = l2,  IsAW(a1) = w2,  IsAW(a2) = w3; 
} : C

D = SCHEMA {
	entities 
		yAmphibian,
		yLandAnimal,
		yWaterAnimal,
		yAnimal;
	edges
		yIsAL:yAmphibian->yLandAnimal,
		yIsAW:yAmphibian->yWaterAnimal,
		yIsALL:yLandAnimal->yAnimal,
		yIsAWW:yWaterAnimal->yAnimal;
	attributes
		yattA:yAmphibian->String, 
		yattL:yLandAnimal->String, 
		yattW:yWaterAnimal->String;
	pathEqualities
		forall x. yIsALL(yIsAL(x)) = yIsAWW(yIsAW(x));
	obsEqualities;
} : Type

F = mapping {
	sorts 
		Amphibian->yAmphibian,
		LandAnimal->yLandAnimal,
		WaterAnimal->yWaterAnimal;
	symbols
		attA -> forall x. yattA(x), 
		attL -> forall x. yattL(x), 
		attW -> forall x. yattW(x),
		IsAL -> forall x. yIsAL(x),
		IsAW -> forall x. yIsAW(x);
} : C -> D

J = sigma F I

I1= INSTANCE {
	generators 
		xa1 : Amphibian,
		xl1, xl2, xl3, xl4 : LandAnimal,
		xw1, xw2, xw3: WaterAnimal;
	equations
		attL(xl1) = gecko, attL(xl2) = frog, 
		attL(xl3) = human, attL(xl4) = cow, 
		attW(xw1) = fish, attW(xw2) = gecko, 
		attW(xw3) = frog, IsAL(xa1) = xl1, 
		IsAW(xa1) = xw2, attA(xa1) = gecko; 
} : C

t = transpres {
	sorts 
		Amphibian -> {(xa1,a1)},
		LandAnimal -> {(xl1,l1),(xl2,l2),(xl3,l3),(xl4,l4)},
		WaterAnimal -> {(xw1,w1),(xw2,w2),(xw3,w3)};
} : I1 -> I

t0 = sigma F t

Q = DELTA F

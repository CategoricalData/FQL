/* Here we show that all three data migration functors (delta, pi, SIGMA) 
 * can be used to compute composition of functions.
 * It's good to TURN OBSERVABLES ON.
  */

schema TwoMaps = {
	nodes A,B,C;
	attributes attA:A->int,attC:C->int;
	arrows sq:A->B,inc:B->C;
	equations;
}

instance I = {
	nodes 
		A->{a,b,c,d},
		B->{m,n,o,p,q},
		C->{v,w,x,y,z};
	attributes 
		attA->{(a,"-1"),(b,0),(c,1),(d,2)},
		attC->{(v,1),(w,2),(x,3),(y,4),(z,5)};
	arrows
		sq->{(a,n),(b,m),(c,n),(d,q)},//square map \x.x^2
		inc->{(m,v),(n,w),(o,x),(p,y),(q,z)}//inc map \x.x+1
	;
} : TwoMaps

schema OneMap = {
	nodes A,C;
	attributes attA:A->int,attC:C->int;
	arrows sqinc:A->C;
	equations;
}

mapping ForDelta = {
	nodes A->A,C->C;
	attributes attA->attA,attC->attC;
	arrows sqinc->A.sq.inc;
} : OneMap -> TwoMaps

instance ComposeUsingDelta = delta ForDelta I

mapping ForSIGMA = {
	nodes A->A,B->C, C->C;
	attributes attA->attA,attC->attC;
	arrows sq->A.sqinc,inc->C;
} : TwoMaps -> OneMap

instance ComposeUsingSigma = SIGMA ForSIGMA I

mapping ForPi = {
	nodes A->A,B->A, C->C;
	attributes attA->attA,attC->attC;
	arrows sq->A,inc->A.sqinc;
} : TwoMaps -> OneMap

instance ComposeUsingPi = pi ForPi I
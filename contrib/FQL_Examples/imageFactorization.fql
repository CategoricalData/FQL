/* This file starts with a function f:x->y 
 * and factors it as a surjection, x->im, followed by an injection im->y.
 * This is done using data migration queries delta,pi,SIGMA.
 * The function f is encoded as an A-instance J:A->Set. 
 */

schema A = {
	nodes x,y;
	attributes;
	arrows f:x->y;
	equations;
}

schema B = {
	nodes a,b,c,d;
	attributes;
	arrows f:a->b,g:a->c,h:b->d,i:c->d;
	equations;//?
}

schema C = {
	nodes a,b,c,d,e;
	attributes;
	arrows f:a->b,g:a->c,h:b->d,i:c->d, ff:e->b,gg:e->c;
	equations e.ff.h=e.gg.i;
}

schema D = {
	nodes v,w,x,y;
	attributes;
	arrows f:v->w,ff:v->w,g:w->x,h:x->y;
	equations v.f.g=v.ff.g;
}

schema E = {
	nodes x,im,y;
	attributes;
	arrows f:x->im, g:im->y;
	equations;
}

mapping F = {
	nodes a->x,b->x,c->x,d->y;
	attributes;
	arrows f->x,g->x,h->x.f,i->x.f;
} : B -> A

mapping G = {
	nodes a->a,b->b,c->c,d->d;
	attributes ;
	arrows f->a.f,g->a.g,h->b.h,i->c.i;
} : B -> C

mapping H = {
	nodes e->v,a->w,b->w,c->w,d->y;
	attributes;
	arrows f->w,g->w,h->w.g.h,i->w.g.h,ff->v.f,gg->v.ff;
} : C -> D

mapping I = {
	nodes x->w,im->x,y->y;
	attributes;
	arrows f->w.g, g->x.h;
} : E -> D


instance J = {
	nodes x->{1,2,3,4,5,6},y->{1,2,3,4};
	attributes;
	arrows f->{(1,1),(2,1),(3,1),(4,2),(5,2),(6,3)};
} :  A

instance J2=delta F J

instance J3=pi G J2

instance J4=SIGMA H J3

instance ImageFactorization=delta I J4

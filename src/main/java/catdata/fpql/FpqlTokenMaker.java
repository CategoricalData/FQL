/* The following code was generated by JFlex 1.4.3 on 3/5/15 6:23 PM */

/*
 * Generated on 3/5/15 6:23 PM
 */
package catdata.fpql;

import java.io.*;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings({"unused"})
public class FpqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int EOL_COMMENT = 4;
  private static final int YYINITIAL = 0;
  private static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\24\1\14"+
    "\1\16\1\1\1\24\1\24\1\6\1\25\1\25\1\21\1\24\1\24"+
    "\1\73\1\23\1\20\1\4\3\4\4\4\2\3\1\36\1\24\1\15"+
    "\1\75\1\74\1\24\1\16\1\53\1\5\1\54\1\47\1\44\1\40"+
    "\2\1\1\46\2\1\1\41\1\1\1\50\1\42\1\1\1\55\1\45"+
    "\1\51\1\52\1\56\1\1\1\43\1\1\1\57\1\1\1\25\1\10"+
    "\1\25\1\15\1\2\1\0\1\60\1\13\1\64\1\62\1\35\1\32"+
    "\1\67\1\26\1\33\2\1\1\34\1\66\1\61\1\65\1\30\1\70"+
    "\1\12\1\31\1\27\1\11\1\72\1\37\1\1\1\63\1\71\1\22"+
    "\1\15\1\22\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\7\1\1\7\15\1\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\2\1\2\4\1\14\1\15\1\16"+
    "\2\1\1\17\36\1\1\20\11\0\2\1\1\4\1\21"+
    "\1\4\31\1\11\0\2\1\1\4\22\1\2\0\1\22"+
    "\2\0\1\23\1\0\2\1\1\4\5\1\1\24\6\1"+
    "\5\0\1\1\1\4\31\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\272\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\272\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\272\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\272\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\272\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\272\0\272\0\272\0\u0b24\0\u0b62"+
    "\0\370\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\272"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\272\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\370\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u23d8\0\u28b0\0\u2492\0\u28ee"+
    "\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int... result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\4\1\15"+
    "\2\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\5\1\24\1\25\1\26\1\27\5\5\1\30\6\5"+
    "\1\31\2\5\1\32\1\33\1\34\1\5\1\35\1\36"+
    "\1\37\1\5\1\40\1\5\1\41\1\42\1\4\1\25"+
    "\7\43\1\44\11\43\1\45\4\43\1\46\3\43\1\47"+
    "\4\43\1\50\36\43\7\51\1\52\16\51\1\53\3\51"+
    "\1\54\4\51\1\55\36\51\77\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\34\5\3\0\3\57\2\6"+
    "\1\57\2\0\4\57\2\0\1\57\7\0\10\57\1\0"+
    "\34\57\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\22\5\1\60\11\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\61\1\0\34\5\3\0\7\12"+
    "\1\62\1\63\3\12\1\64\61\12\17\0\1\13\76\0"+
    "\1\65\1\66\55\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\26\5\1\67\5\5\4\0\5\5\2\0"+
    "\1\56\1\5\1\70\1\5\12\0\1\5\1\71\6\5"+
    "\1\0\24\5\1\72\7\5\4\0\5\5\2\0\1\56"+
    "\1\73\2\5\12\0\5\5\1\71\2\5\1\0\21\5"+
    "\1\74\4\5\1\75\5\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\5\5\1\76\1\5\1\77\1\0\22\5"+
    "\1\100\2\5\1\101\6\5\4\0\5\5\2\0\1\56"+
    "\1\5\1\102\1\5\12\0\3\5\1\103\1\71\1\5"+
    "\1\104\1\5\1\0\21\5\1\105\4\5\1\36\5\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\1\5\1\106"+
    "\6\5\1\0\22\5\1\107\1\71\10\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\23\5\1\110"+
    "\5\5\1\111\2\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\1\112\7\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\2\5\1\113\31\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\10\5\1\71\1\114\22\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\17\5\1\115\14\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\1\5\1\116\1\117"+
    "\1\71\4\5\1\0\22\5\1\100\11\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\26\5\1\120"+
    "\5\5\4\0\5\5\2\0\1\56\3\5\12\0\7\5"+
    "\1\121\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\21\5\1\122\4\5\1\123\5\5"+
    "\4\0\5\5\2\0\1\56\1\5\1\71\1\5\12\0"+
    "\10\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\21\5\1\124\12\5\4\0\5\5"+
    "\2\0\1\56\1\125\2\5\12\0\10\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\21\5\1\126\4\5\1\127\5\5\77\0\1\25\1\0"+
    "\7\43\1\0\11\43\1\0\4\43\1\0\3\43\1\0"+
    "\4\43\1\0\36\43\20\0\1\130\104\0\1\131\75\0"+
    "\1\132\3\0\1\133\101\0\1\134\36\0\7\51\1\0"+
    "\16\51\1\0\3\51\1\0\4\51\1\0\36\51\27\0"+
    "\1\135\75\0\1\136\3\0\1\137\101\0\1\140\47\0"+
    "\1\141\64\0\6\57\2\0\4\57\2\0\1\57\7\0"+
    "\10\57\1\0\34\57\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\103\2\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\142\4\5\1\143"+
    "\1\5\1\0\34\5\3\0\10\62\1\144\3\62\1\145"+
    "\65\62\1\12\1\62\1\12\1\0\1\12\1\146\3\12"+
    "\12\62\1\12\2\62\1\12\26\62\1\12\14\62\1\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\27\5"+
    "\1\147\4\5\4\0\5\5\2\0\1\56\1\150\2\5"+
    "\12\0\10\5\1\0\34\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\150\5\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\3\5\1\151\4\5"+
    "\1\0\34\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\36\2\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\152\1\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\30\5\1\153\3\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\6\5\1\154\1\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\23\5\1\71"+
    "\10\5\4\0\5\5\2\0\1\56\3\5\12\0\1\155"+
    "\7\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\26\5\1\156\5\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\71\6\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\26\5\1\157\5\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\6\5\1\122\1\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\7\5\1\160\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\1\5\1\71\1\5"+
    "\12\0\3\5\1\161\2\5\1\71\1\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\30\5\1\162\3\5\4\0\5\5\2\0\1\56\1\163"+
    "\2\5\12\0\10\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\164\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\3\5"+
    "\1\165\30\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\12\5\1\166\21\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\5\5\1\167\26\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\1\5\1\170"+
    "\6\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\2\5\1\171\5\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\71\6\5\1\0"+
    "\23\5\1\162\10\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\6\5\1\172\1\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\3\5\1\150\4\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\1\5\1\173\1\5"+
    "\12\0\10\5\1\0\21\5\1\174\12\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\2\5\1\175\5\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\7\5"+
    "\1\176\1\0\34\5\4\0\5\5\2\0\1\56\1\5"+
    "\1\177\1\5\12\0\10\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\5\5\1\100\2\5\1\0"+
    "\34\5\32\0\1\200\76\0\1\201\101\0\1\202\100\0"+
    "\1\203\65\0\1\204\76\0\1\205\101\0\1\206\100\0"+
    "\1\207\41\0\3\210\5\0\1\210\16\0\1\210\2\0"+
    "\1\210\2\0\1\210\3\0\1\210\2\0\1\210\3\0"+
    "\2\210\3\0\1\210\1\0\1\210\1\0\1\210\12\0"+
    "\5\5\2\0\1\56\1\211\2\5\12\0\10\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\21\5\1\212\12\5\3\0\7\62\1\0\71\62"+
    "\3\213\2\62\1\144\2\62\1\213\1\145\15\62\1\213"+
    "\2\62\1\213\2\62\1\213\3\62\1\213\2\62\1\213"+
    "\3\62\2\213\3\62\1\213\1\62\1\213\1\62\1\213"+
    "\11\62\1\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\26\5\1\214\5\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\7\5\1\71\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\215\7\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\24\5\1\216\7\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\27\5\1\217\4\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\7\5\1\220\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\7\5\1\153"+
    "\1\0\34\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\27\5\1\71\4\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\1\221\33\5\4\0"+
    "\5\5\2\0\1\56\1\5\1\222\1\5\12\0\10\5"+
    "\1\0\34\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\1\5\1\223\6\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\7\5\1\224\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\21\5"+
    "\1\225\12\5\4\0\5\5\2\0\1\56\1\5\1\150"+
    "\1\5\12\0\10\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\4\5\1\226\27\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\13\5\1\227\20\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\6\5\1\230\25\5\4\0\5\5"+
    "\2\0\1\56\1\5\1\231\1\5\12\0\10\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\6\5"+
    "\1\232\1\5\1\0\34\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\5\1\217\6\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\7\5\1\233\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\2\5"+
    "\1\117\5\5\1\0\34\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\234\5\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\1\5\1\232\1\5\12\0\10\5"+
    "\1\0\34\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\235\2\5\1\0\34\5\33\0\1\236\103\0"+
    "\1\237\74\0\1\201\63\0\1\240\102\0\1\241\103\0"+
    "\1\242\74\0\1\205\63\0\1\243\55\0\3\244\5\0"+
    "\1\244\16\0\1\244\2\0\1\244\2\0\1\244\3\0"+
    "\1\244\2\0\1\244\3\0\2\244\3\0\1\244\1\0"+
    "\1\244\1\0\1\244\12\0\5\5\2\0\1\56\1\5"+
    "\1\245\1\5\12\0\10\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\246\6\5\1\0"+
    "\34\5\3\0\3\62\3\247\2\62\1\144\2\62\1\247"+
    "\1\145\15\62\1\247\2\62\1\247\2\62\1\247\3\62"+
    "\1\247\2\62\1\247\3\62\2\247\3\62\1\247\1\62"+
    "\1\247\1\62\1\247\11\62\1\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\27\5\1\250\4\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\26\5"+
    "\1\251\5\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\22\5\1\252\11\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\21\5\1\71\12\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\25\5\1\103\6\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\36\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\21\5\1\253\12\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\21\5\1\254\12\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\3\5\1\255\4\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\5\1\256\6\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\5\5\1\257\26\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\14\5\1\260\17\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\20\5"+
    "\1\71\13\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\261\2\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\24\5\1\71\7\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\1\5\1\142"+
    "\6\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\5\5\1\262\2\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\21\5\1\263"+
    "\12\5\34\0\1\201\4\0\1\237\57\0\1\264\56\0"+
    "\1\240\1\265\3\240\1\265\2\0\3\240\2\0\1\265"+
    "\1\0\1\240\1\265\1\0\3\265\10\240\1\265\34\240"+
    "\1\265\1\0\1\265\31\0\1\205\4\0\1\242\57\0"+
    "\1\266\56\0\1\243\1\267\3\243\1\267\2\0\3\243"+
    "\2\0\1\267\1\0\1\243\1\267\1\0\3\267\10\243"+
    "\1\267\34\243\1\267\1\0\1\267\3\0\3\270\5\0"+
    "\1\270\16\0\1\270\2\0\1\270\2\0\1\270\3\0"+
    "\1\270\2\0\1\270\3\0\2\270\3\0\1\270\1\0"+
    "\1\270\1\0\1\270\12\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\22\5\1\71\11\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\5\5\1\271\2\5\1\0"+
    "\34\5\3\0\3\62\3\272\2\62\1\144\2\62\1\272"+
    "\1\145\15\62\1\272\2\62\1\272\2\62\1\272\3\62"+
    "\1\272\2\62\1\272\3\62\2\272\3\62\1\272\1\62"+
    "\1\272\1\62\1\272\11\62\1\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\26\5\1\273\5\5\4\0"+
    "\5\5\2\0\1\56\1\103\2\5\12\0\10\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\26\5\1\274\5\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\1\5\1\150\6\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\22\5"+
    "\1\275\11\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\5\5\1\276\2\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\6\5\1\71\25\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\11\5\1\277\22\5\4\0\5\5\2\0\1\56\2\5"+
    "\1\300\12\0\10\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\22\5\1\301\11\5"+
    "\4\0\5\5\2\0\1\56\2\5\1\302\12\0\10\5"+
    "\1\0\34\5\23\0\1\240\75\0\1\243\60\0\3\5"+
    "\5\0\1\5\16\0\1\5\2\0\1\5\2\0\1\5"+
    "\3\0\1\5\2\0\1\5\3\0\2\5\3\0\1\5"+
    "\1\0\1\5\1\0\1\5\12\0\5\5\2\0\1\56"+
    "\3\5\12\0\10\5\1\0\26\5\1\303\5\5\3\0"+
    "\3\62\3\12\2\62\1\144\2\62\1\12\1\145\15\62"+
    "\1\12\2\62\1\12\2\62\1\12\3\62\1\12\2\62"+
    "\1\12\3\62\2\12\3\62\1\12\1\62\1\12\1\62"+
    "\1\12\11\62\1\0\5\5\2\0\1\56\1\5\1\304"+
    "\1\5\12\0\10\5\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\27\5\1\305\4\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\25\5\1\150\6\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\26\5\1\306\5\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\10\5\1\0\15\5\1\307"+
    "\16\5\4\0\5\5\2\0\1\56\1\310\2\5\12\0"+
    "\10\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\30\5\1\71\3\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\6\5\1\162\1\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\10\5"+
    "\1\0\22\5\1\311\11\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\2\5\1\312\5\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\5\5\1\313\2\5"+
    "\1\0\34\5\4\0\5\5\2\0\1\56\3\5\12\0"+
    "\10\5\1\0\22\5\1\224\11\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\10\5\1\0\5\5\1\71\26\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\1\5\1\314"+
    "\6\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\10\5\1\0\21\5\1\315\12\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\1\316\7\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\10\5\1\0"+
    "\21\5\1\317\12\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\7\5\1\320\1\0\34\5\4\0\5\5\2\0"+
    "\1\56\3\5\12\0\6\5\1\321\1\5\1\0\34\5"+
    "\4\0\5\5\2\0\1\56\3\5\12\0\5\5\1\322"+
    "\2\5\1\0\34\5\4\0\5\5\2\0\1\56\3\5"+
    "\12\0\6\5\1\71\1\5\1\0\34\5\4\0\5\5"+
    "\2\0\1\56\3\5\12\0\3\5\1\71\4\5\1\0"+
    "\34\5\4\0\5\5\2\0\1\56\3\5\12\0\5\5"+
    "\1\323\2\5\1\0\34\5\4\0\5\5\2\0\1\56"+
    "\3\5\12\0\3\5\1\156\4\5\1\0\34\5\4\0"+
    "\5\5\2\0\1\56\3\5\12\0\10\5\1\0\32\5"+
    "\1\150\1\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12214];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\1\11\7\1\1\11"+
    "\16\1\1\11\5\1\1\11\3\1\1\0\5\1\3\11"+
    "\41\1\1\11\11\0\3\1\1\11\32\1\11\0\25\1"+
    "\2\0\1\1\2\0\1\1\1\0\17\1\5\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FpqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public static String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
        offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = TokenTypes.NULL;
		switch (initialTokenType) {
						case TokenTypes.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = TokenTypes.NULL;
		}

		s = text;

        yyreset(zzReader);
        yybegin(state);
        return yylex();


	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
    private void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  private FpqlTokenMaker(Reader in) {
      zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FpqlTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
     */
  private Token yylex() {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
           
              zzInput = zzBufferL[zzCurrentPosL++];
            
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3:
          addNullToken();
          return firstToken;
        case 21: break;
        case 14:
          start = zzMarkedPos-2;
          yybegin(MLC);
        case 22: break;
        case 5:
          addToken(TokenTypes.WHITESPACE);
        case 23: break;
        case 17:
          addToken(TokenTypes.ERROR_STRING_DOUBLE);
        case 24: break;
        case 15:
          addToken(TokenTypes.RESERVED_WORD);
        case 25: break;
        case 6:
          addToken(TokenTypes.SEPARATOR);
        case 26: break;
        case 1:
          addToken(TokenTypes.IDENTIFIER);
        case 27: break;
        case 10:
          addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL);
          addNullToken();
          return firstToken;
        case 28: break;
        case 13:
          start = zzMarkedPos-2;
          yybegin(EOL_COMMENT);
        case 29: break;
        case 4:
          addToken(TokenTypes.ERROR_STRING_DOUBLE);
          addNullToken();
          return firstToken;
        case 30: break;
        case 16:
          yybegin(YYINITIAL);
          addToken(start,zzStartRead+2-1, TokenTypes.COMMENT_MULTILINE);
        case 31: break;
        case 12:
          addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
        case 32: break;
        case 19: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, TokenTypes.COMMENT_EOL); start = zzMarkedPos;
          }
        case 33: break;
        case 18:
          int temp=zzStartRead;
          addToken(start,zzStartRead-1, TokenTypes.COMMENT_MULTILINE);
          addHyperlinkToken(temp,zzMarkedPos-1, TokenTypes.COMMENT_MULTILINE);
          start = zzMarkedPos;
        case 34: break;
        case 20:
          addToken(TokenTypes.RESERVED_WORD_2);
        case 35: break;
        case 11:
          addToken(TokenTypes.ERROR_NUMBER_FORMAT);
        case 36: break;
        case 2:
          addToken(TokenTypes.LITERAL_NUMBER_DECIMAL_INT);
        case 37: break;
        case 7:
          addToken(TokenTypes.OPERATOR);
        case 38: break;
        case 8:
        case 39: break;
        case 9:
          addToken(start,zzStartRead-1, TokenTypes.COMMENT_MULTILINE);
          return firstToken;
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT:
              addToken(start,zzStartRead-1, TokenTypes.COMMENT_EOL);
              addNullToken();
              return firstToken;
              case 212: break;
            case YYINITIAL:
              addNullToken();
              return firstToken;
              case 213: break;
            case MLC:
              addToken(start,zzStartRead-1, TokenTypes.COMMENT_MULTILINE);
              return firstToken;
              case 214: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.4.3 on 7/1/14 6:27 PM */

/*
 * Generated on 7/1/14 6:27 PM
 */
package catdata.fql.parse;

import java.io.*;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */
@SuppressWarnings({"unused"})
public class FqlTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int EOL_COMMENT = 4;
  private static final int YYINITIAL = 0;
  private static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\7\1\0\1\17\1\15\22\0\1\17\1\26\1\14"+
    "\1\16\1\1\1\26\1\26\1\6\1\27\1\27\1\21\1\30\1\26"+
    "\1\24\1\22\1\20\1\4\1\74\1\74\1\4\4\4\2\3\1\40"+
    "\1\26\1\15\1\100\1\77\1\26\1\16\1\57\3\5\1\44\1\5"+
    "\1\67\1\1\1\62\2\1\1\66\1\70\1\64\2\1\1\42\1\45"+
    "\1\60\1\63\1\43\1\65\1\61\1\1\1\46\1\1\1\27\1\10"+
    "\1\27\1\101\1\2\1\0\1\51\1\13\1\52\1\71\1\23\1\35"+
    "\1\53\1\31\1\36\1\1\1\75\1\37\1\50\1\47\1\56\1\33"+
    "\1\54\1\12\1\34\1\32\1\11\1\72\1\41\1\73\1\55\1\76"+
    "\1\25\1\101\1\25\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\3\1\1\7\22\1\1\10\1\11\5\10\1\12"+
    "\3\10\1\0\1\13\1\0\1\13\2\1\2\4\1\14"+
    "\1\15\1\16\1\17\7\1\1\20\34\1\1\21\11\0"+
    "\1\17\1\0\3\1\1\4\1\22\1\4\17\1\1\23"+
    "\23\1\11\0\2\1\1\4\1\24\27\1\2\0\1\25"+
    "\2\0\1\26\1\0\1\1\1\4\13\1\5\0\1\1"+
    "\1\4\23\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\306\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\306\0\u02d6\0\u0318\0\u035a"+
    "\0\306\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\306\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\306\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4"+
    "\0\u02d6\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\306\0\306"+
    "\0\306\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0108\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\306\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\306\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u0108"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u0108"+
    "\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u2c16\0\u30fc\0\u2cdc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int... result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\4\1\7\1\4\1\10"+
    "\1\11\1\5\1\12\2\4\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\1\21\1\15\1\5\1\22"+
    "\1\23\1\24\1\25\1\26\1\5\1\15\1\5\1\27"+
    "\1\5\1\30\2\5\1\31\1\32\1\33\1\34\1\5"+
    "\1\35\1\5\1\36\1\37\1\40\10\5\1\41\1\42"+
    "\1\5\1\6\1\43\1\5\1\4\2\15\7\44\1\45"+
    "\11\44\1\46\7\44\1\47\3\44\1\50\3\44\1\51"+
    "\40\44\7\52\1\53\21\52\1\54\3\52\1\55\3\52"+
    "\1\56\40\52\103\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\36\5\3\0\3\60\2\6"+
    "\1\60\2\0\4\60\2\0\1\60\3\0\1\61\1\62"+
    "\5\0\7\60\1\0\33\60\1\6\2\60\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\6\5\1\63\27\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\64\5\0\7\5\1\0\36\5\3\0\7\12"+
    "\1\65\1\66\3\12\1\67\65\12\17\0\1\13\102\0"+
    "\1\70\1\71\63\0\2\72\67\0\1\72\6\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\6\5\1\73\4\5\1\74\15\5\1\75\1\76\3\5"+
    "\102\0\1\15\3\0\5\5\2\0\1\57\1\5\1\77"+
    "\1\5\7\0\1\5\5\0\1\100\6\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\1\5\1\101\1\5\7\0"+
    "\1\5\5\0\5\5\1\102\1\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\1\103\2\5\7\0\1\5\5\0"+
    "\1\5\1\104\3\5\1\105\1\5\1\0\6\5\1\106"+
    "\2\5\1\107\24\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\3\5\1\110\2\5\1\111\1\0"+
    "\10\5\1\112\25\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\3\5\1\113\3\5\1\0\6\5"+
    "\1\114\1\115\20\5\1\102\5\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\2\5"+
    "\1\116\33\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\24\5\1\117\11\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\15\5\1\120\20\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\10\5\1\121"+
    "\25\5\4\0\5\5\2\0\1\57\1\5\1\122\1\5"+
    "\7\0\1\5\5\0\1\5\1\123\1\124\4\5\1\0"+
    "\6\5\1\106\27\5\4\0\5\5\2\0\1\57\1\125"+
    "\2\5\7\0\1\5\5\0\1\126\6\5\1\0\15\5"+
    "\1\127\20\5\4\0\5\5\2\0\1\57\1\130\2\5"+
    "\7\0\1\5\5\0\7\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\1\5\1\102\1\5\7\0\1\5\5\0"+
    "\2\5\1\131\4\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\17\5"+
    "\1\132\16\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\21\5\1\133\14\5\4\0"+
    "\5\5\2\0\1\57\1\5\1\101\1\5\7\0\1\134"+
    "\5\0\7\5\1\0\36\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\15\5\1\135"+
    "\20\5\4\0\5\5\2\0\1\57\3\5\7\0\1\136"+
    "\5\0\7\5\1\0\36\5\3\0\7\44\1\0\11\44"+
    "\1\0\7\44\1\0\3\44\1\0\3\44\1\0\40\44"+
    "\20\0\1\137\113\0\1\140\101\0\1\141\3\0\1\142"+
    "\104\0\1\143\40\0\7\52\1\0\21\52\1\0\3\52"+
    "\1\0\3\52\1\0\40\52\32\0\1\144\101\0\1\145"+
    "\3\0\1\146\104\0\1\147\51\0\1\150\70\0\6\60"+
    "\2\0\4\60\2\0\1\60\4\0\1\60\5\0\7\60"+
    "\1\0\36\60\3\0\3\60\2\151\1\60\2\0\4\60"+
    "\2\0\1\60\4\0\1\60\1\152\3\0\1\152\7\60"+
    "\1\0\33\60\1\151\2\60\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\5\5\1\153\1\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\1\5\1\154\4\5\1\155\1\0\36\5\3\0"+
    "\10\65\1\156\3\65\1\157\71\65\1\12\1\65\1\12"+
    "\1\0\1\12\1\160\3\12\15\65\1\12\2\65\1\12"+
    "\11\65\1\12\24\65\1\12\5\65\3\60\2\72\1\60"+
    "\2\0\4\60\2\0\1\60\4\0\1\62\5\0\7\60"+
    "\1\0\33\60\1\72\2\60\4\0\5\5\2\0\1\57"+
    "\1\161\2\5\7\0\1\5\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\1\162\2\5\7\0\1\5"+
    "\5\0\7\5\1\0\36\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\10\5\1\163"+
    "\25\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\1\5\1\164\5\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\1\165\2\5\7\0\1\5\5\0\7\5"+
    "\1\0\10\5\1\166\25\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\167\5\0\7\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\15\5\1\170\20\5\4\0\5\5\2\0\1\57"+
    "\2\5\1\171\7\0\1\5\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\1\5\1\172\1\5\7\0"+
    "\1\5\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\12\5"+
    "\1\173\23\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\30\5\1\102\5\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\1\174"+
    "\6\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\1\5\1\102\5\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\15\5\1\175\20\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\6\5\1\176\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\15\5\1\177\20\5\4\0\5\5"+
    "\2\0\1\57\1\5\1\102\1\5\7\0\1\5\5\0"+
    "\1\5\1\200\1\5\1\201\2\5\1\102\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\2\5\1\202\4\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\3\5"+
    "\1\203\32\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\16\5\1\204\17\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\1\5"+
    "\1\102\5\5\1\0\30\5\1\205\5\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\1\5\1\206"+
    "\1\207\4\5\1\0\36\5\4\0\5\5\2\0\1\57"+
    "\1\5\1\210\1\5\7\0\1\5\5\0\7\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\1\5\1\211\5\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\2\5\1\212"+
    "\4\5\1\0\36\5\4\0\5\5\2\0\1\57\1\5"+
    "\1\213\1\5\7\0\1\5\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\10\5\1\214\25\5\4\0\5\5\2\0"+
    "\1\57\1\5\1\215\1\5\7\0\1\5\5\0\7\5"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\216\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\2\5\1\217\4\5"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\20\5\1\220\15\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\26\5\1\221\7\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\6\5\1\222\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\5\5\1\106\1\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\1\5\1\223\1\5\7\0\1\5\5\0\7\5"+
    "\1\0\36\5\35\0\1\224\102\0\1\225\105\0\1\226"+
    "\103\0\1\227\72\0\1\230\102\0\1\231\105\0\1\232"+
    "\103\0\1\233\43\0\3\234\5\0\1\234\7\0\1\234"+
    "\11\0\1\234\6\0\1\234\4\0\2\234\4\0\1\234"+
    "\11\0\1\234\2\0\1\234\5\0\3\60\2\151\1\60"+
    "\2\0\4\60\2\0\1\60\4\0\1\60\5\0\7\60"+
    "\1\0\33\60\1\151\2\60\6\0\2\151\67\0\1\151"+
    "\6\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\1\5\1\102\5\5\1\0\15\5\1\167\20\5\4\0"+
    "\5\5\2\0\1\57\1\235\2\5\7\0\1\5\5\0"+
    "\7\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\10\5\1\236\25\5"+
    "\3\0\7\65\1\0\75\65\3\237\2\65\1\156\2\65"+
    "\1\237\1\157\6\65\1\237\11\65\1\237\6\65\1\237"+
    "\4\65\2\237\4\65\1\237\11\65\1\237\2\65\1\237"+
    "\5\65\1\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\7\5\1\240\26\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\10\5\1\241\25\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\6\5\1\102\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\242\5\0\7\5"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\102\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\6\5"+
    "\1\243\27\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\6\5\1\102\27\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\2\5"+
    "\1\102\4\5\1\0\36\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\3\5\1\244\3\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\5\5\1\245\1\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\7\5\1\246\26\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\247\5\0\7\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\10\5\1\250\25\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\3\5\1\165\3\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\33\5\1\102\2\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\1\5\1\251\5\5"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\6\5\1\252\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\4\5\1\253\31\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\25\5\1\102\10\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\254\5\0"+
    "\7\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\11\5\1\255\24\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\2\5\1\256\4\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\15\5"+
    "\1\257\20\5\4\0\5\5\2\0\1\57\1\5\1\260"+
    "\1\5\7\0\1\5\5\0\7\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\6\5"+
    "\1\261\1\0\36\5\4\0\5\5\2\0\1\57\1\5"+
    "\1\261\1\5\7\0\1\5\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\1\5\1\102\1\5\7\0"+
    "\1\5\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\262\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\1\5\1\263\1\5\7\0"+
    "\1\5\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\15\5"+
    "\1\264\20\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\4\5\1\265\31\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\27\5\1\266\6\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\1\5\1\246\5\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\6\5\1\267\27\5\36\0\1\270"+
    "\106\0\1\271\64\0\1\225\100\0\1\272\112\0\1\273"+
    "\106\0\1\274\64\0\1\231\100\0\1\275\62\0\3\276"+
    "\5\0\1\276\7\0\1\276\11\0\1\276\6\0\1\276"+
    "\4\0\2\276\4\0\1\276\11\0\1\276\2\0\1\276"+
    "\6\0\5\5\2\0\1\57\1\5\1\167\1\5\7\0"+
    "\1\5\5\0\7\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\1\5\1\277\5\5"+
    "\1\0\36\5\3\0\3\65\3\300\2\65\1\156\2\65"+
    "\1\300\1\157\6\65\1\300\11\65\1\300\6\65\1\300"+
    "\4\65\2\300\4\65\1\300\11\65\1\300\2\65\1\300"+
    "\5\65\1\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\1\5\1\301\5\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\1\5\1\302\1\5\7\0\1\5\5\0"+
    "\7\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\3\5\1\303\3\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\11\5\1\304\24\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\6\5"+
    "\1\305\27\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\7\5\1\0\10\5\1\102\25\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\7\5\1\306\26\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\1\5\1\200\5\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\10\5\1\307\25\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\5\5\1\205"+
    "\1\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\5\5\1\240\30\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\3\5\1\102\3\5\1\0\36\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\1\102\6\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\5\5\1\310\1\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\1\254\35\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\5\5\1\311\1\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\14\5\1\102\21\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\1\5\1\154\5\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\14\5\1\240\21\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\3\5\1\312"+
    "\3\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\21\5\1\313\14\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\16\5\1\102\17\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\163\5\0\7\5\1\0\36\5"+
    "\37\0\1\225\3\0\1\271\61\0\1\314\62\0\1\272"+
    "\1\315\3\272\1\315\2\0\3\272\2\0\1\315\1\0"+
    "\1\272\2\315\1\272\1\315\1\0\3\315\7\272\1\315"+
    "\36\272\1\0\1\315\35\0\1\231\3\0\1\274\61\0"+
    "\1\316\62\0\1\275\1\317\3\275\1\317\2\0\3\275"+
    "\2\0\1\317\1\0\1\275\2\317\1\275\1\317\1\0"+
    "\3\317\7\275\1\317\36\275\1\0\1\317\4\0\3\320"+
    "\5\0\1\320\7\0\1\320\11\0\1\320\6\0\1\320"+
    "\4\0\2\320\4\0\1\320\11\0\1\320\2\0\1\320"+
    "\6\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\5\5\1\321\1\5\1\0\36\5\3\0\3\65\3\322"+
    "\2\65\1\156\2\65\1\322\1\157\6\65\1\322\11\65"+
    "\1\322\6\65\1\322\4\65\2\322\4\65\1\322\11\65"+
    "\1\322\2\65\1\322\5\65\1\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\5\5\1\323\1\5\1\0"+
    "\36\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\6\5\1\75\27\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\4\5\1\324"+
    "\2\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\1\325\6\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\12\5\1\200\23\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\10\5\1\240"+
    "\25\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\6\5\1\326\27\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\7\5\1\0"+
    "\6\5\1\327\27\5\4\0\5\5\2\0\1\57\2\5"+
    "\1\330\7\0\1\5\5\0\7\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\5\5"+
    "\1\331\1\5\1\0\36\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\22\5\1\332"+
    "\13\5\23\0\1\272\101\0\1\275\64\0\3\5\5\0"+
    "\1\5\7\0\1\5\11\0\1\5\6\0\1\5\4\0"+
    "\2\5\4\0\1\5\11\0\1\5\2\0\1\5\6\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\15\5\1\333\20\5\3\0\3\65\3\12\2\65"+
    "\1\156\2\65\1\12\1\157\6\65\1\12\11\65\1\12"+
    "\6\65\1\12\4\65\2\12\4\65\1\12\11\65\1\12"+
    "\2\65\1\12\5\65\1\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\15\5\1\334\20\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\15\5\1\335\20\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\173\5\0\7\5\1\0\36\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\11\5\1\336\24\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\12\5"+
    "\1\240\23\5\4\0\5\5\2\0\1\57\1\337\2\5"+
    "\7\0\1\5\5\0\7\5\1\0\36\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\1\5\1\165"+
    "\5\5\1\0\36\5\4\0\5\5\2\0\1\57\3\5"+
    "\7\0\1\5\5\0\7\5\1\0\22\5\1\340\13\5"+
    "\4\0\5\5\2\0\1\57\3\5\7\0\1\5\5\0"+
    "\7\5\1\0\6\5\1\341\27\5\4\0\5\5\2\0"+
    "\1\57\3\5\7\0\1\5\5\0\7\5\1\0\6\5"+
    "\1\254\27\5\4\0\5\5\2\0\1\57\1\5\1\161"+
    "\1\5\7\0\1\5\5\0\7\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\240\5\0\7\5"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\1\5\1\205\5\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\3\5\1\342\32\5\4\0\5\5\2\0\1\57"+
    "\3\5\7\0\1\5\5\0\7\5\1\0\10\5\1\343"+
    "\25\5\4\0\5\5\2\0\1\57\3\5\7\0\1\5"+
    "\5\0\7\5\1\0\23\5\1\102\12\5\4\0\5\5"+
    "\2\0\1\57\3\5\7\0\1\5\5\0\6\5\1\344"+
    "\1\0\36\5\4\0\5\5\2\0\1\57\3\5\7\0"+
    "\1\5\5\0\5\5\1\345\1\5\1\0\36\5\4\0"+
    "\5\5\2\0\1\57\3\5\7\0\1\5\5\0\7\5"+
    "\1\0\35\5\1\165\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14058];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\5\1\1\11\3\1\1\11"+
    "\23\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\5\1\3\11\45\1\1\11\11\0\1\1\1\0\4\1"+
    "\1\11\44\1\11\0\33\1\2\0\1\1\2\0\1\1"+
    "\1\0\15\1\5\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int... result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FqlTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public static String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
        offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = TokenTypes.NULL;
		switch (initialTokenType) {
						case TokenTypes.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = TokenTypes.NULL;
		}

		s = text;

        yyreset(zzReader);
        yybegin(state);
        return yylex();


	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
    private void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  private FqlTokenMaker(Reader in) {
      zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FqlTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
 private Token yylex() {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
           
              zzInput = zzBufferL[zzCurrentPosL++];
            
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3:
          addNullToken();
          return firstToken;
        case 23: break;
        case 14:
          start = zzMarkedPos-2;
          yybegin(MLC);
        case 24: break;
        case 5:
          addToken(Token.WHITESPACE);
        case 25: break;
        case 18:
          addToken(Token.ERROR_STRING_DOUBLE);
        case 26: break;
        case 15:
          addToken(Token.LITERAL_NUMBER_FLOAT);
        case 27: break;
        case 20:
          addToken(Token.RESERVED_WORD);
        case 28: break;
        case 7:
          addToken(Token.SEPARATOR);
        case 29: break;
        case 1:
          addToken(Token.IDENTIFIER);
        case 30: break;
        case 10:
          addToken(start,zzStartRead-1, Token.COMMENT_EOL);
          addNullToken();
          return firstToken;
        case 31: break;
        case 13:
          start = zzMarkedPos-2;
          yybegin(EOL_COMMENT);
        case 32: break;
        case 4:
          addToken(Token.ERROR_STRING_DOUBLE);
          addNullToken();
          return firstToken;
        case 33: break;
        case 19:
          addToken(Token.DATA_TYPE);
        case 34: break;
        case 17:
          yybegin(YYINITIAL);
          addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
        case 35: break;
        case 12:
          addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
        case 36: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 37: break;
        case 21:
          int temp=zzStartRead;
          addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE);
          addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE);
          start = zzMarkedPos;
        case 38: break;
        case 16:
          addToken(Token.RESERVED_WORD_2);
        case 39: break;
        case 11:
          addToken(Token.ERROR_NUMBER_FORMAT);
        case 40: break;
        case 2:
          addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
        case 41: break;
        case 6:
          addToken(Token.OPERATOR);
        case 42: break;
        case 8:
        case 43: break;
        case 9:
          addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE);
          return firstToken;
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT:
              addToken(start,zzStartRead-1, Token.COMMENT_EOL);
              addNullToken();
              return firstToken;
              case 230: break;
            case YYINITIAL:
              addNullToken();
              return firstToken;
              case 231: break;
            case MLC:
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE);
              return firstToken;
              case 232: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
